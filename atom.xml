<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大脑好饿</title>
  
  <subtitle>补充大脑营养</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.imliujun.com/"/>
  <updated>2020-04-13T13:57:21.584Z</updated>
  <id>http://www.imliujun.com/</id>
  
  <author>
    <name>LiuJun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>提升效率——自动加固并上传到蒲公英</title>
    <link href="http://www.imliujun.com/automation2.html"/>
    <id>http://www.imliujun.com/automation2.html</id>
    <published>2019-03-21T08:55:42.000Z</published>
    <updated>2020-04-13T13:57:21.584Z</updated>
    
    <content type="html"><![CDATA[<p>在文章 <a href="http://www.imliujun.com/automation1.html">提升效率——自动打包上传蒲公英</a> 的最后，我们留下了一个问题：</p><blockquote><p>我们的超管包是需要发给运营人员去使用的，防止泄露导致的安全风险，我们希望对超管包先进行加固然后再上传到蒲公英。</p></blockquote><p>我们的应用在发布的时候一般都需要进行加固和生成多渠道包，大家通常的做法应该是下载加固客户端，或者将 apk 文件上传到加固服务的管理后台进行加固，然后等着加固完成，再下载安装包文件。</p><p>再次引用我的名言：</p><blockquote><p>时间是最宝贵的财富，我们的时间得用在刀刃上。</p></blockquote><p>本文基于 <a href="http://www.imliujun.com/gradle3.html">使用 Gradle 实现一套代码开发多个应用</a> 中的 Gradle 配置进行迭代开发，带领大家实现 <code>360加固</code> 的自动化 Gradle 脚本。</p><h1 id="自动加固"><a href="#自动加固" class="headerlink" title="自动加固"></a>自动加固</h1><p>我们的目标是全自动化，并且在每个团队成员的电脑上都能够实现一行命令执行，不需要做额外的配置。</p><h2 id="自动下载-360-加固程序"><a href="#自动下载-360-加固程序" class="headerlink" title="自动下载 360 加固程序"></a>自动下载 360 加固程序</h2><p>完整的 <code>config.gradle</code> 配置：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    <span class="comment">//签名文件配置</span></span><br><span class="line">    signing = [<span class="string">keyAlias     :</span> <span class="string">'xxxxx'</span>,</span><br><span class="line">               <span class="string">keyPassword  :</span> <span class="string">'xxxxx'</span>,</span><br><span class="line">               <span class="string">storeFile    :</span> <span class="string">'../sign.keystore'</span>,</span><br><span class="line"><span class="symbol">               storePassword:</span> <span class="string">'xxxxxx'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//蒲公英配置</span></span><br><span class="line">    pgy = [<span class="string">apiKey   :</span> <span class="string">"xxxx"</span>,</span><br><span class="line"><span class="symbol">           uploadUrl:</span> <span class="string">"https://www.pgyer.com/apiv2/app/upload"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//360加固配置</span></span><br><span class="line">    jiagu = [<span class="string">name             :</span> <span class="string">'xxxxx'</span>,</span><br><span class="line">             <span class="string">password         :</span> <span class="string">'xxxxx'</span>,</span><br><span class="line">             <span class="string">zipPath          :</span> <span class="string">"../jiagu/360jiagu.zip"</span>,</span><br><span class="line">             <span class="string">unzipPath        :</span> <span class="string">"../jiagu/360jiagubao/"</span>,</span><br><span class="line">             <span class="string">jarPath          :</span> <span class="string">'../jiagu/360jiagubao/jiagu/jiagu.jar'</span>,</span><br><span class="line"><span class="symbol">             channelConfigPath:</span> <span class="string">'../jiagu/Channel.txt'</span>,</span><br><span class="line">             <span class="string">jiagubao_mac     :</span> <span class="string">"http://down.360safe.com/360Jiagu/360jiagubao_mac.zip"</span>,</span><br><span class="line">             <span class="string">jiagubao_windows :</span> <span class="string">"http://down.360safe.com/360Jiagu/360jiagubao_windows_64.zip"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    android = [<span class="string">compileSdkVersion:</span> <span class="number">28</span>,</span><br><span class="line">               <span class="string">minSdkVersion    :</span> <span class="number">19</span>,</span><br><span class="line">               <span class="string">targetSdkVersion :</span> <span class="number">28</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//版本号管理</span></span><br><span class="line">    APP1_VERSION_NAME = <span class="string">"2.0.2"</span></span><br><span class="line">    APP1_TEST_NUM = <span class="string">"0001"</span></span><br><span class="line">    APP2_VERSION_NAME = <span class="string">"1.0.5"</span></span><br><span class="line">    APP2_TEST_NUM = <span class="string">"0005"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个 <code>jiagu.gradle</code> 文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.tools.ant.taskdefs.condition.Os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> downloadUrl = Os.isFamily(Os.FAMILY_WINDOWS) ? rootProject.ext.jiagu["jiagubao_windows"] : rootProject.ext.jiagu[<span class="string">"jiagubao_mac"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> zipPath = rootProject.ext.jiagu[<span class="string">"zipPath"</span>]</span><br><span class="line"><span class="keyword">def</span> unzipPath = rootProject.ext.jiagu[<span class="string">"unzipPath"</span>]</span><br><span class="line"></span><br><span class="line">task download360jiagu() &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        <span class="comment">//如果 Zip 文件不存在就进行下载</span></span><br><span class="line">        File zipFile = file(zipPath)</span><br><span class="line">        <span class="keyword">if</span> (!zipFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!zipFile.parentFile.exists()) &#123;</span><br><span class="line">                zipFile.parentFile.mkdirs()</span><br><span class="line">            &#125;</span><br><span class="line">            exec &#123;</span><br><span class="line">                executable = <span class="string">'curl'</span></span><br><span class="line">                args = [<span class="string">'-o'</span>, zipPath, downloadUrl]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="comment">//解压 Zip 文件</span></span><br><span class="line">        ant.unzip(<span class="string">src:</span> zipPath, <span class="string">dest:</span> unzipPath, <span class="string">encoding:</span> <span class="string">"GBK"</span>)</span><br><span class="line">        <span class="comment">//将解压后的文件开启读写权限，防止执行 Jar 文件没有权限执行</span></span><br><span class="line">        exec &#123;</span><br><span class="line">            executable = <span class="string">'chmod'</span></span><br><span class="line">            args = [<span class="string">'-R'</span>, <span class="string">'777'</span>, unzipPath]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>download360jiagu</code> 就可以自动下载并解压 360 的加固程序啦。</p><h2 id="根据多渠道文件进行加固"><a href="#根据多渠道文件进行加固" class="headerlink" title="根据多渠道文件进行加固"></a>根据多渠道文件进行加固</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.tools.ant.taskdefs.condition.Os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> downloadUrl = Os.isFamily(Os.FAMILY_WINDOWS) ? rootProject.ext.jiagu["jiagubao_windows"] : rootProject.ext.jiagu[<span class="string">"jiagubao_mac"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> zipPath = rootProject.ext.jiagu[<span class="string">"zipPath"</span>]</span><br><span class="line"><span class="keyword">def</span> unzipPath = rootProject.ext.jiagu[<span class="string">"unzipPath"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//加固后所有apk的保存路径</span></span><br><span class="line"><span class="keyword">def</span> APP1_OUTPUT_PATH = <span class="string">"jiagu/apk/app1/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> APP1_APK_PATH = <span class="string">"$&#123;projectDir.absolutePath&#125;/build/outputs/apk/app1Online/release/$&#123;getApkName(rootProject.ext.APP1_VERSION_NAME)&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加固</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config 配置加固可选项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> apkPath 要加固的文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputPath 输出路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> automulpkg 是否自动生成多渠道包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">def</span> jiaGu(String config, String apkPath, String outputPath, <span class="keyword">boolean</span> automulpkg) &#123;</span><br><span class="line">    <span class="comment">//首次使用必须先登录</span></span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'java'</span></span><br><span class="line">        args = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-login'</span>, rootProject.ext.jiagu[<span class="string">"name"</span>], rootProject.ext.jiagu[<span class="string">"password"</span>]]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//升级到最新版本</span></span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'java'</span></span><br><span class="line">        args = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-update'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//显示当前版本号</span></span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'java'</span></span><br><span class="line">        args = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-version'</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入签名信息</span></span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'java'</span></span><br><span class="line">        args = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-importsign'</span>,</span><br><span class="line">                rootProject.ext.signing[<span class="string">"storeFile"</span>],</span><br><span class="line">                rootProject.ext.signing[<span class="string">"storePassword"</span>],</span><br><span class="line">                rootProject.ext.signing[<span class="string">"keyAlias"</span>],</span><br><span class="line">                rootProject.ext.signing[<span class="string">"keyPassword"</span>]]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置加固可选项</span></span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'java'</span></span><br><span class="line">        args = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-config'</span>, config]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加固命令</span></span><br><span class="line">    <span class="keyword">def</span> jiaGuArgs</span><br><span class="line">    <span class="keyword">if</span> (automulpkg) &#123;</span><br><span class="line">        jiaGuArgs = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-jiagu'</span>,</span><br><span class="line">                     apkPath,</span><br><span class="line">                     outputPath,</span><br><span class="line">                     <span class="string">'-autosign'</span>,</span><br><span class="line">                     <span class="string">'-automulpkg'</span>,</span><br><span class="line">                     <span class="string">'-pkgparam'</span>,</span><br><span class="line">                     rootProject.ext.jiagu[<span class="string">"channelConfigPath"</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        jiaGuArgs = [<span class="string">'-jar'</span>, rootProject.ext.jiagu[<span class="string">"jarPath"</span>], <span class="string">'-jiagu'</span>,</span><br><span class="line">                     apkPath,</span><br><span class="line">                     outputPath,</span><br><span class="line">                     <span class="string">'-autosign'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'java'</span></span><br><span class="line">        args = jiaGuArgs</span><br><span class="line">    &#125;</span><br><span class="line">    println <span class="string">"加固的文件路径：$&#123;apkPath&#125;"</span></span><br><span class="line">    println <span class="string">"加固后的文件路径：$&#123;outputPath&#125;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * App1</span></span><br><span class="line"><span class="comment"> * 根据多渠道文件进行加固</span></span><br><span class="line"><span class="comment"> * 执行命令：./gradlew releaseApp1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">task releaseApp1(<span class="string">dependsOn:</span> <span class="string">'assembleApp1OnlineRelease'</span>) &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        <span class="comment">//判断加固程序是否存在，不存在则进行下载</span></span><br><span class="line">        File jarFile = file(rootProject.ext.jiagu[<span class="string">"jarPath"</span>])</span><br><span class="line">        <span class="keyword">if</span> (!jarFile.exists()) &#123;</span><br><span class="line">            download360jiagu.execute()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    group = <span class="string">"publish"</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        File apkOutputFile = <span class="keyword">new</span> File(APP1_OUTPUT_PATH, getCurTime())</span><br><span class="line">        checkOutputDir(apkOutputFile)</span><br><span class="line">        File apkFile = file(APP1_APK_PATH)</span><br><span class="line">        <span class="keyword">if</span> (!apkFile.exists()) &#123;</span><br><span class="line">            println(<span class="string">"apk file is not exists："</span> + apkFile.absolutePath)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        jiaGu(<span class="string">"-"</span>, apkFile.absolutePath, apkOutputFile.absolutePath, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> checkOutputDir(File apkOutputFile) &#123;</span><br><span class="line">    <span class="keyword">if</span> (apkOutputFile.exists()) &#123;</span><br><span class="line">        File[] files = apkOutputFile.listFiles()</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File <span class="string">file :</span> files) &#123;</span><br><span class="line">                file.delete()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        apkOutputFile.mkdirs()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">def</span> getCurTime() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date().format(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们只需要在命令行执行 <code>./gradlew releaseApp1</code> 就可以静待输出了。</p><p>在根目录的 <code>jiagu</code> 文件夹中创建<code>Channel.txt</code>文件，在其中可以配置你需要的多渠道信息。</p><p>如果需要配置更多的加固选项，可以在 <code>jiagu/360jiagubao/jiagu/help.txt</code>中查看所有的加固命令。</p><h1 id="加固超管包上传蒲公英"><a href="#加固超管包上传蒲公英" class="headerlink" title="加固超管包上传蒲公英"></a>加固超管包上传蒲公英</h1><p>我们的超管包不需要上传应用商店，直接加固上传到蒲公英，然后发送二维码给管理员下载安装。我们把自动加固和自动上传蒲公英整合到一起。</p><p>在<code>jiagu.gradle</code>中添加单独加固超管包的方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> APP1_ADMIN_OUTPUT_PATH = <span class="string">"jiagu/apk/app1Admin/"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> APP1_ADMIN_APK_PATH = <span class="string">"$&#123;projectDir.absolutePath&#125;/build/outputs/apk/app1Admin/release/$&#123;getApkName(getTestVersionName("</span>管理员<span class="string">"))&#125;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加固超管服包</span></span><br><span class="line"><span class="comment"> * 执行命令：./gradlew jiaGuApp1Admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">task jiaGuApp1Admin(<span class="string">dependsOn:</span> <span class="string">'assembleApp1AdminRelease'</span>) &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        File jarFile = file(rootProject.ext.jiagu[<span class="string">"jarPath"</span>])</span><br><span class="line">        <span class="keyword">if</span> (!jarFile.exists()) &#123;</span><br><span class="line">            download360jiagu.execute()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    group = <span class="string">"publish"</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        File apkOutputFile = <span class="keyword">new</span> File(APP1_ADMIN_OUTPUT_PATH)</span><br><span class="line">        checkOutputDir(apkOutputFile)</span><br><span class="line">        File apkFile = file(APP1_ADMIN_APK_PATH)</span><br><span class="line">        <span class="keyword">if</span> (!apkFile.exists()) &#123;</span><br><span class="line">            println(<span class="string">"apk file is not exists："</span> + apkFile.absolutePath)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        jiaGu(<span class="string">"-"</span>, apkFile.absolutePath, apkOutputFile.absolutePath, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改蒲公英上传方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> app1AdminFileDir = <span class="string">"$&#123;projectDir.parent&#125;/jiagu/apk/app2Admin/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 “uploadApp1Admin” 命令自动打超管服包，并上传到蒲公英</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">task uploadApp1Admin(<span class="string">dependsOn:</span> <span class="string">'jiaGuApp1Admin'</span>) &#123;</span><br><span class="line">    group = <span class="string">"publish"</span></span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(app1AdminFileDir)</span><br><span class="line">        <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            println <span class="string">"Alpha dir not exists："</span> + dir.path</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">boolean</span> accept(File file) &#123;</span><br><span class="line">                <span class="keyword">return</span> file.isFile() &amp;&amp; file.name.endsWith(<span class="string">".apk"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> (files == <span class="literal">null</span> || files.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            println <span class="string">"files == null ||  files.size() == 0"</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        File apkFile = files[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        uploadPGY(apkFile.path)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在命令行执行 <code>./gradlew uploadApp1Admin</code> 就可以静待二维码地址输出。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果你不喜欢执行命令行，我们只点一下鼠标也可以执行自动化命令：</p><p><img src="http://images.imliujun.com/static/images/automation/gralde_publish.png" alt="Gradle 命令"></p><blockquote><p>demo地址：<a href="https://github.com/imliujun/GradleTest" target="_blank" rel="noopener">https://github.com/imliujun/GradleTest</a></p></blockquote><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><ul><li><a href="http://www.imliujun.com/automation1.html">提升效率——自动打包上传蒲公英</a></li><li><a href="http://www.imliujun.com/gradle3.html">使用 Gradle 实现一套代码开发多个应用</a></li></ul><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img src="http://images.imliujun.com/static/images/wx_qrcode.gif" alt="公众号：大脑好饿 "></p>]]></content>
    
    <summary type="html">
    
      一行命令自动加固多渠道包，并上传到蒲公英
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="自动化" scheme="http://www.imliujun.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Gradle" scheme="http://www.imliujun.com/tags/Gradle/"/>
    
      <category term="蒲公英" scheme="http://www.imliujun.com/tags/%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
    
      <category term="自动加固" scheme="http://www.imliujun.com/tags/%E8%87%AA%E5%8A%A8%E5%8A%A0%E5%9B%BA/"/>
    
  </entry>
  
  <entry>
    <title>提升效率——自动打包上传蒲公英</title>
    <link href="http://www.imliujun.com/automation1.html"/>
    <id>http://www.imliujun.com/automation1.html</id>
    <published>2019-03-17T12:07:02.000Z</published>
    <updated>2019-03-21T16:00:08.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时间是最宝贵的财富，我们的时间得用在刀刃上。</p></blockquote><p>在文章 <a href="http://www.imliujun.com/gradle1.html">使用 Gradle 对应用进行个性化定制</a> 中，我们能够针对一个应用的正式服、测试服、超管服等其他版本，进行个性化定制。所以经常会有测试跑过来说，帮我打个测试服的包吧、帮我打个正式服的包吧、帮我打个超管服的包吧。我打你一脸包😤😤🤯。</p><p>我们的目标是<strong>一行命令</strong>完成：</p><ol><li>自动编译 apk 上传到蒲公英</li><li>上传完成后输出二维码地址和版本号</li><li>支持多环境包上传</li></ol><h1 id="自动上传蒲公英"><a href="#自动上传蒲公英" class="headerlink" title="自动上传蒲公英"></a>自动上传蒲公英</h1><p>直接使用蒲公英的上传 <a href="https://www.pgyer.com/doc/view/api#uploadApp" target="_blank" rel="noopener">API</a> ，在 Gradle 中封装如下方法：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">def</span> uploadPGY(String filePath) &#123;</span><br><span class="line">    <span class="keyword">def</span> stdout = <span class="keyword">new</span> ByteArrayOutputStream()</span><br><span class="line">    exec &#123;</span><br><span class="line">        executable = <span class="string">'curl'</span></span><br><span class="line">        args = [<span class="string">'-F'</span>, <span class="string">"file=@$&#123;filePath&#125;"</span>, <span class="string">'-F'</span>, <span class="string">"_api_key=$&#123;rootProject.ext.pgy["</span>apiKey<span class="string">"]&#125;"</span>, rootProject.ext.pgy[<span class="string">"uploadUrl"</span>]]</span><br><span class="line">        standardOutput = stdout</span><br><span class="line">    &#125;</span><br><span class="line">    String output = stdout.toString()</span><br><span class="line">    <span class="keyword">def</span> parsedJson = <span class="keyword">new</span> groovy.json.JsonSlurper().parseText(output)</span><br><span class="line">    println parsedJson.data.buildQRCodeURL</span><br><span class="line">    println <span class="string">"版本号："</span> + parsedJson.data.buildVersion</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，执行以上方法就可以实现我们上面的两个目标啦。看不懂的我们继续，包教包会。</p><blockquote><p><a href="http://curl.haxx.se/" target="_blank" rel="noopener">curl</a> 是一种命令行工具，作用是发出网络请求，然后得到和提取数据，显示在”标准输出”（stdout）上面。</p></blockquote><p>我们使用 curl 命令来调用蒲公英的接口上传 apk 文件。将蒲公英的 <code>apiKey</code> 和 <code>uploadUrl</code> 放在 config.gradle 中进行统一的管理。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    pgy = [<span class="string">apiKey   :</span> <span class="string">"xxxxxxxxxxx"</span>,</span><br><span class="line"><span class="symbol">           uploadUrl:</span> <span class="string">"https://www.pgyer.com/apiv2/app/upload"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stdout</code> 变量是用来获取网络请求返回的数据流，我们解析成 JSON 对象后打印出二维码地址和版本号信息。如果你还想上传或者输出更多信息请查看蒲公英的上传 <a href="https://www.pgyer.com/doc/view/api#uploadApp" target="_blank" rel="noopener">API</a> 。</p><p>这个时候大家要问了，apk 的文件路径从哪来呢？</p><h1 id="实现不同环境包上传"><a href="#实现不同环境包上传" class="headerlink" title="实现不同环境包上传"></a>实现不同环境包上传</h1><p>我们有正式环境、测试环境和超管环境，并且每个环境生成的 apk 文件名也不同，那么我们怎么获取到 apk 文件的路径呢？</p><h2 id="统一文件命名规则"><a href="#统一文件命名规则" class="headerlink" title="统一文件命名规则"></a>统一文件命名规则</h2><p>在<code>config.gradle</code> 中增加版本信息</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ext&#123;</span><br><span class="line">    pgy = [<span class="string">apiKey   :</span> <span class="string">"xxxxxxxxxxx"</span>,</span><br><span class="line"><span class="symbol">           uploadUrl:</span> <span class="string">"https://www.pgyer.com/apiv2/app/upload"</span></span><br><span class="line">          ]</span><br><span class="line"></span><br><span class="line">    android = [<span class="string">compileSdkVersion:</span> <span class="number">28</span>,</span><br><span class="line"><span class="symbol">               buildToolsVersion:</span> <span class="string">"28.0.3"</span>,</span><br><span class="line">               <span class="string">minSdkVersion    :</span> <span class="number">16</span>,</span><br><span class="line">               <span class="string">targetSdkVersion :</span> <span class="number">28</span>,</span><br><span class="line">               <span class="string">versionCode      :</span> <span class="number">1</span>,</span><br><span class="line">               <span class="string">versionName      :</span> <span class="string">"1.0.0"</span></span><br><span class="line">              ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在根目录的 <code>build.gradle</code> 中增加获取 <code>getApkName</code> 方法</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> getTestVersionName(String suffix) &#123;</span><br><span class="line">    <span class="keyword">def</span> testVersion = <span class="string">"001"</span></span><br><span class="line">    <span class="keyword">if</span> (suffix == <span class="literal">null</span> || suffix.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s.%s"</span>, rootProject.ext.android[<span class="string">"versionName"</span>], testVersion)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s.%s.%s"</span>, rootProject.ext.android[<span class="string">"versionName"</span>], testVersion, suffix)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getApkName(String versionName) &#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"我是一个包-v%s.apk"</span>, versionName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 application 工程的 <code>build.gradle</code> 中修改 apk 文件名</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        offline &#123;</span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://offline.domain.com/\""</span></span><br><span class="line">            versionName getTestVersionName(<span class="string">"offline"</span>) <span class="comment">//修改 versionName</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        online &#123;</span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://online.domain.com/\""</span></span><br><span class="line">            versionName rootProject.ext.android[<span class="string">"versionName"</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        admin &#123;</span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://admin.domain.com/\""</span></span><br><span class="line">            versionName getTestVersionName(<span class="string">"管理员"</span>) <span class="comment">//修改 versionName</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    variant.outputs.all &#123;</span><br><span class="line">        outputFileName = getApkName(variant.versionName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现多环境上传"><a href="#实现多环境上传" class="headerlink" title="实现多环境上传"></a>实现多环境上传</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> offlineFile = <span class="string">"$&#123;projectDir.absolutePath&#125;/build/outputs/apk/offline/release/$&#123;getApkName(getTestVersionName("</span>offline<span class="string">"))&#125;"</span></span><br><span class="line"><span class="keyword">def</span> adminFile = <span class="string">"$&#123;projectDir.absolutePath&#125;/build/outputs/apk/admin/release/$&#123;getApkName(getTestVersionName("</span>管理员<span class="string">"))&#125;"</span></span><br><span class="line"><span class="keyword">def</span> onlineFile = <span class="string">"$&#123;projectDir.absolutePath&#125;/build/outputs/apk/online/release/$&#123;getApkName(rootProject.ext.android["</span>versionName<span class="string">"])&#125;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 “uploadOfflineApk” 命令自动打测试服包，并上传到蒲公英</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">task uploadOfflineApk(<span class="string">dependsOn:</span> <span class="string">'assembleOfflineRelease'</span>) &#123;</span><br><span class="line">    group = <span class="string">"publish"</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        uploadPGY(offlineFile)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 “uploadOnlineApk” 命令自动打正式服包，并上传到蒲公英</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">task uploadOnlineApk(<span class="string">dependsOn:</span> <span class="string">'assembleOnlineRelease'</span>) &#123;</span><br><span class="line">    group = <span class="string">"publish"</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        uploadPGY(onlineFile)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 “uploadAdminApk” 命令自动打超管服包，并上传到蒲公英</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">task uploadAdminApk(<span class="string">dependsOn:</span> <span class="string">'assembleAdminRelease'</span>) &#123;</span><br><span class="line">    group = <span class="string">"publish"</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        uploadPGY(adminFile)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一行命令打3个包上传：<code>./gradlew uploadOfflineApk uploadOnlineApk uploadAdminApk</code></p><h1 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h1><p>我们的超管包是需要发给运营人员去使用的，防止泄露导致的安全风险，我们希望对超管包先进行加固然后再上传到蒲公英。</p><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><ul><li><a href="http://www.imliujun.com/gradle1.html">使用 Gradle 对应用进行个性化定制</a></li><li><a href="http://www.imliujun.com/gradle3.html">使用 Gradle 实现一套代码开发多个应用</a></li></ul><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img src="http://images.imliujun.com/static/images/wx_qrcode.gif" alt="公众号：大脑好饿 "></p>]]></content>
    
    <summary type="html">
    
      一行命令自动打包上传蒲公英，输出二维码地址和版本号信息
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="自动化" scheme="http://www.imliujun.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
      <category term="Gradle" scheme="http://www.imliujun.com/tags/Gradle/"/>
    
      <category term="蒲公英" scheme="http://www.imliujun.com/tags/%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
    
  </entry>
  
  <entry>
    <title>线程安全引起的录音杂音电流音问题</title>
    <link href="http://www.imliujun.com/recording1.html"/>
    <id>http://www.imliujun.com/recording1.html</id>
    <published>2018-03-21T16:29:24.000Z</published>
    <updated>2019-03-17T14:58:33.538Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间写了一个录音模块，需求是：『录音的时候实时语音转文字，实时计算音量大小，实时进行 MP3 转码保存为文件』</p><p>首先进行需求分析，确定技术方案：</p><ol><li>使用 AudioRecord 进行录音，实时获取原始音频数据</li><li>将音频数据传递给第三方语音转文字 SDK 进行处理</li><li>对音频数据进行处理，计算出音量大小</li><li>对音频数据进行 MP3 编码</li><li>将编码后的数据写入 MP3 文件</li></ol><p>整个业务流程如上，只不过我们为了效率和解耦，将每个处理逻辑独立开来使用多线程进行并发处理。</p><p>具体流程见下图：</p><img title="录音流程图" src="http://images.imliujun.com/static/images/Recording/RecordingFlowChart.jpeg"><h2 id="代码撸起来"><a href="#代码撸起来" class="headerlink" title="代码撸起来"></a>代码撸起来</h2><p>下面的伪代码全部使用 <code>kotlin</code> 展示，不熟悉 <code>kotlin</code> 没关系，只需要关注具体的业务逻辑。</p><h3 id="音频数据采集"><a href="#音频数据采集" class="headerlink" title="音频数据采集"></a>音频数据采集</h3><p>首先创建一个线程给 AudioRecord 进行录音采集：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emitter: FlowableProcessor&lt;ShortArray&gt;</span><br><span class="line"><span class="keyword">val</span> isRecording = AtomicBoolean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = ShortArray(bufferSize)</span><br><span class="line">  <span class="keyword">while</span> (isRecording.<span class="keyword">get</span>()) &#123;</span><br><span class="line">    <span class="keyword">val</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSize)</span><br><span class="line">    <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//将数据使用 RxJava 发送出去</span></span><br><span class="line">      emitter.onNext(buffer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在子线程中读取到音频数据，并且通过 RxJava 将数据向下传递。<strong>（用什么传递不重要，重要的是将数据传递给下一层去进行处理）</strong></p><h3 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h3><p>外部接收 RxJava 的事件，对音频数据进行处理 <strong>（再次提醒，不需要在意细节，主要关注业务流程）</strong> ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 observeOnIo() 操作将线程切换到 IO 线程</span></span><br><span class="line">recorder?.start()?.observeOnIo()?.subscribe&#123; it:ShortArray -&gt;</span><br><span class="line">  <span class="comment">//此时的代码和录音采集的代码分别执行在不同的线程上了</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算音量大小</span></span><br><span class="line">  <span class="keyword">val</span> volume = calVolume(it)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">recorder?.start()?.observeOnIo()?.subscribe&#123; it:ShortArray -&gt;</span><br><span class="line">  <span class="comment">//此时的代码和录音采集的代码分别执行在不同的线程上了</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//将 ShortArray 转换为 ByteArray</span></span><br><span class="line">  <span class="keyword">var</span> pcmBuffer: ByteArray = ...</span><br><span class="line">  it.toByteArray(pcmBuffer)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//语音转文字</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">recorder?.start()?.observeOnIo()?.subscribe&#123; it:ShortArray -&gt;</span><br><span class="line">  <span class="comment">//此时的代码和录音采集的代码分别执行在不同的线程上了</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//进行 MP3 编码</span></span><br><span class="line">  <span class="keyword">val</span> encode = mp3Encode(it)</span><br><span class="line">  <span class="keyword">if</span> (encode != <span class="literal">null</span> &amp;&amp; encode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 将编码后的数据写入文件</span></span><br><span class="line">    mp3Stream.write(mp3Buffer, <span class="number">0</span>, encode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个业务流程就是这样，我自己使用的手机和公司所有的测试机，试听录制出来的 MP3 文件都没有问题。</p><p>开开心心的打包，测试，上线。</p><p>然后你懂的，有些用户录制出现杂音、电流音、声音断断续续。😂😂</p><p>机智的同学可能通过标题已经猜到了问题的原因，但我当时没有手机进行问题复现，为了解决这个问题可是花了很大的功夫才定位到问题所在。</p><h3 id="解决杂音问题"><a href="#解决杂音问题" class="headerlink" title="解决杂音问题"></a>解决杂音问题</h3><p>因为我们在录音采集时将数据读取到 <code>buffer</code> 对象中，然后将 <code>buffer</code> 对象通过 RxJava 向下传递，因为 RxJava 的下游都开启了异步线程去处理事件，那么在录音采集的死循环中不等当前的数据进行 MP3 编码完毕就对 <code>buffer</code> 对象写入新采集到的音频数据，这个时候 MP3 编码出来的音频数据就被污染了。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emitter: FlowableProcessor&lt;ShortArray&gt;</span><br><span class="line"><span class="keyword">val</span> isRecording = AtomicBoolean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = ShortArray(bufferSize)</span><br><span class="line">  <span class="keyword">while</span> (isRecording.<span class="keyword">get</span>()) &#123;</span><br><span class="line">    <span class="comment">// 读取音频数据到 buffer 中</span></span><br><span class="line">    <span class="keyword">val</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSize)</span><br><span class="line">    <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//将 buffer 发送出去，因为下游是异步处理，所以执行完毕直接开始下次循环</span></span><br><span class="line">      emitter.onNext(buffer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要解决这个问题很简单：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 buffer 数据 copy 一份进行传递，这样就不会修改下游的数据了</span></span><br><span class="line">emitter.onNext(buffer.copyOf())</span><br></pre></td></tr></table></figure><p>但是使用 copy 的方式会频繁的创建、销毁 ShortArray 对象，能不能优化一下呢？</p><p>我们可以使用对象池来管理 ShortArray，这样就不会频繁的进行创建、销毁操作。在 Android 的 support.v4 包中有一个 <code>Pools</code> 类实现了简单的对象池功能：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> bufferPool = Pools.SynchronizedPool&lt;ShortArray&gt;(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">acquireBuffer</span><span class="params">(bufferSize: <span class="type">Int</span>)</span></span>: ShortArray &#123;</span><br><span class="line">  <span class="keyword">var</span> buffer = bufferPool.acquire()</span><br><span class="line">  <span class="keyword">if</span> (buffer == <span class="literal">null</span> || buffer.size != bufferSize) &#123;</span><br><span class="line">    buffer = ShortArray(bufferSize)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buffer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">releaseBuffer</span><span class="params">(shortArray: <span class="type">ShortArray</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bufferPool.release(shortArray)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    Timber.e(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (isRecording.<span class="keyword">get</span>()) &#123;</span><br><span class="line">    <span class="comment">//通过对象池获取 buffer 对象</span></span><br><span class="line">    <span class="keyword">val</span> buffer = acquireBuffer(bufferSize)</span><br><span class="line">    <span class="comment">// 读取音频数据到 buffer 中</span></span><br><span class="line">    <span class="keyword">val</span> readSize = audioRecord.read(buffer, <span class="number">0</span>, bufferSize)</span><br><span class="line">    <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//将 buffer 发送出去，下游处理完毕后调用 releaseBuffer 对 buffer 对象进行释放</span></span><br><span class="line">      emitter.onNext(buffer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很简单的一个多线程并发问题，但是当我们自己不能复现的时候，还是带来了很大的麻烦。<br>这种问题在编写 <code>emitter.onNext(buffer)</code> 这行代码的时候就应该要考虑到线程安全问题，并且我之前做直播截屏的时候也遇到过类似的问题，截取直播流的画面帧保存为图片，因为截屏的操作不会很频繁，当时是直接 copy 一份画面帧的数据保存为图片。</p><p>可是以前没有写博客记录这种小问题，导致遇到类似的问题尽量不记得了。所以这次记录下来😂😂。</p><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img title="公众号：大脑好饿" src="http://images.imliujun.com/static/images/wx_qrcode.gif"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间写了一个录音模块，需求是：『录音的时候实时语音转文字，实时计算音量大小，实时进行 MP3 转码保存为文件』&lt;/p&gt;
&lt;p&gt;首先进行需求分析，确定技术方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 AudioRecord 进行录音，实时获取原始音频数据&lt;/li&gt;
&lt;li&gt;将音
      
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="录音" scheme="http://www.imliujun.com/tags/%E5%BD%95%E9%9F%B3/"/>
    
      <category term="AudioRecord" scheme="http://www.imliujun.com/tags/AudioRecord/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gradle 实现一套代码开发多个应用</title>
    <link href="http://www.imliujun.com/gradle3.html"/>
    <id>http://www.imliujun.com/gradle3.html</id>
    <published>2017-07-11T07:06:23.000Z</published>
    <updated>2019-03-17T14:57:10.567Z</updated>
    
    <content type="html"><![CDATA[<p>在文章 <a href="http://www.imliujun.com/gradle1.html">使用 Gradle 对应用进行个性化定制</a> 中，我们能够针对一个应用的正式服、测试服、超管服等其他版本，进行个性化定制。<br>这一篇文章我们来点大动作，让你用一套代码构建多个应用。</p><h1 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h1><p>需求：“将某个应用换一套皮肤、第三方账号、后台服务器，改个名字上线，并且以后的新功能同步进行更新”。</p><p>当你遇到这样的需求会怎么做呢？</p><p>是将项目复制一份，然后修改其中的内容，有新功能的时候再手动复制过来稍微修改一下 UI？</p><p>或者可以切换一个分支，在这个分支上修改相关的信息，每次开发完新功能，将代码合并过来，再稍微修改新功能的 UI？</p><p>现在我来介绍使用 <code>Gradle</code> 的 <code>flavorDimensions</code>，实现一份代码构建多个应用。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>老规矩，先上完整的 <code>Gradle</code> 配置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">"25.0.3"</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode gitVersionCode()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置两个应用的签名文件</span></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        app1 &#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"app1.jks"</span>)</span><br><span class="line">            storePassword <span class="string">"111111"</span></span><br><span class="line">            keyAlias <span class="string">"app1"</span></span><br><span class="line">            keyPassword <span class="string">"111111"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        app2 &#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"app2.jks"</span>)</span><br><span class="line">            storePassword <span class="string">"111111"</span></span><br><span class="line">            keyAlias <span class="string">"app2"</span></span><br><span class="line">            keyPassword <span class="string">"111111"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 不显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">            versionNameSuffix <span class="string">"-debug"</span></span><br><span class="line">            signingConfig <span class="keyword">null</span></span><br><span class="line">            manifestPlaceholders.UMENG_CHANNEL_VALUE = <span class="string">"test"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建两个维度的 flavor</span></span><br><span class="line">    flavorDimensions <span class="string">"APP"</span>, <span class="string">"SERVER"</span></span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line"></span><br><span class="line">        app1 &#123;</span><br><span class="line">            dimension <span class="string">"APP"</span></span><br><span class="line">            applicationId <span class="string">'com.imliujun.app1'</span></span><br><span class="line"></span><br><span class="line">            versionName rootProject.ext.APP1_versionName</span><br><span class="line"></span><br><span class="line">            <span class="comment">//应用名</span></span><br><span class="line">            resValue <span class="string">"string"</span>, <span class="string">"app_name"</span>, <span class="string">"APP1"</span></span><br><span class="line"></span><br><span class="line">            buildConfigField(<span class="string">"String"</span>, <span class="string">"versionNumber"</span>, <span class="string">"\"$&#123;rootProject.ext.APP1_versionName&#125;\""</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//第三方SDK的一些配置</span></span><br><span class="line">            buildConfigField <span class="string">"int"</span>, <span class="string">"IM_APPID"</span>, <span class="string">"app1的腾讯IM APPID"</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"IM_ACCOUNTTYPE"</span>, <span class="string">"\"app1的腾讯IM accountype\""</span></span><br><span class="line">            manifestPlaceholders = [UMENG_APP_KEY      : <span class="string">"app1的友盟 APP KEY"</span>,</span><br><span class="line">                                    UMENG_CHANNEL_VALUE: <span class="string">"app1默认的渠道名"</span>,</span><br><span class="line">                                    XG_ACCESS_ID       : <span class="string">"app1信鸽推送ACCESS_ID"</span>,</span><br><span class="line">                                    XG_ACCESS_KEY      : <span class="string">"app1信鸽推送ACCESS_KEY"</span>,</span><br><span class="line">                                    QQ_APP_ID          : <span class="string">"app1的QQ_APP_ID"</span>,</span><br><span class="line">                                    AMAP_KEY           : <span class="string">"app1的高德地图key"</span>,</span><br><span class="line">                                    APPLICATIONID      : applicationId]</span><br><span class="line">            <span class="comment">//签名文件</span></span><br><span class="line">            signingConfig signingConfigs.app1</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        app2 &#123;</span><br><span class="line">            dimension <span class="string">"APP"</span></span><br><span class="line">            applicationId <span class="string">'com.imliujun.app2'</span></span><br><span class="line"></span><br><span class="line">            versionName rootProject.ext.APP2_versionName</span><br><span class="line"></span><br><span class="line">            <span class="comment">//应用名</span></span><br><span class="line">            resValue <span class="string">"string"</span>, <span class="string">"app_name"</span>, <span class="string">"APP2"</span></span><br><span class="line"></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"versionNumber"</span>, <span class="string">"\"$&#123;rootProject.ext.APP2_versionName&#125;\""</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//第三方SDK的一些配置</span></span><br><span class="line">            buildConfigField <span class="string">"int"</span>, <span class="string">"IM_APPID"</span>, <span class="string">"app2的腾讯IM APPID"</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"IM_ACCOUNTTYPE"</span>, <span class="string">"\"app2的腾讯IM accountype\""</span></span><br><span class="line">            manifestPlaceholders = [UMENG_APP_KEY      : <span class="string">"app2的友盟 APP KEY"</span>,</span><br><span class="line">                                    UMENG_CHANNEL_VALUE: <span class="string">"app2默认的渠道名"</span>,</span><br><span class="line">                                    XG_ACCESS_ID       : <span class="string">"app2信鸽推送ACCESS_ID"</span>,</span><br><span class="line">                                    XG_ACCESS_KEY      : <span class="string">"app2信鸽推送ACCESS_KEY"</span>,</span><br><span class="line">                                    QQ_APP_ID          : <span class="string">"app2的QQ_APP_ID"</span>,</span><br><span class="line">                                    AMAP_KEY           : <span class="string">"app2的高德地图key"</span>,</span><br><span class="line">                                    APPLICATIONID      : applicationId]</span><br><span class="line">            <span class="comment">//签名文件</span></span><br><span class="line">            signingConfig signingConfigs.app2</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        offline &#123;</span><br><span class="line">            dimension <span class="string">"SERVER"</span></span><br><span class="line"></span><br><span class="line">            versionName getTestVersionName()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        online &#123;</span><br><span class="line">            dimension <span class="string">"SERVER"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        admin &#123;</span><br><span class="line">            dimension <span class="string">"SERVER"</span></span><br><span class="line"></span><br><span class="line">            versionName rootProject.ext.versionName + <span class="string">"-管理员"</span></span><br><span class="line">            manifestPlaceholders.UMENG_CHANNEL_VALUE = <span class="string">"admin"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    <span class="keyword">switch</span> (variant.flavorName) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app1Admin"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://admin.app1domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getTestVersionName() + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(rootProject.ext.APP1_VERSION_NAME + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app1Offline"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://offline.app1domain.com/\""</span></span><br><span class="line">            variant.mergedFlavor.setVersionName(getTestVersionName())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app1Online"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://online.app1domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getTestVersionName())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app2Admin"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://admin.app2domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getApp2TestVersionName() + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(rootProject.ext.APP2_VERSION_NAME + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app2Offline"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://offline.app2domain.com/\""</span></span><br><span class="line">            variant.mergedFlavor.setVersionName(getApp2TestVersionName())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app2Online"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://online.app2domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getApp2TestVersionName())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    APP1_VERSION_NAME = <span class="string">"2.0.2"</span></span><br><span class="line">    APP1_TEST_NUM = <span class="string">"0001"</span></span><br><span class="line">    APP2_VERSION_NAME = <span class="string">"1.0.5"</span></span><br><span class="line">    APP2_TEST_NUM = <span class="string">"0005"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getTestVersionName() &#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s.%s"</span>, rootProject.ext.APP1_VERSION_NAME,</span><br><span class="line">            rootProject.ext.APP1_TEST_NUM)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getApp2TestVersionName() &#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s.%s"</span>, rootProject.ext.APP2_VERSION_NAME,</span><br><span class="line">            rootProject.ext.APP2_TEST_NUM)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> gitVersionCode() &#123;</span><br><span class="line">    <span class="keyword">def</span> <span class="keyword">count</span> = <span class="string">"git rev-list HEAD --count"</span>.execute().text.trim()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>.isInteger() ? <span class="keyword">count</span>.<span class="keyword">toInteger</span>() : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一篇文章的配置上进行了一些修改，同时保留上一篇文章里所有的功能。</p><h2 id="配置多应用"><a href="#配置多应用" class="headerlink" title="配置多应用"></a>配置多应用</h2><p>首先来看最重要的一个概念：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flavorDimensions <span class="string">"APP"</span>, <span class="string">"SERVER"</span></span><br></pre></td></tr></table></figure><p>这一行代码配置了两个维度的 <code>flavor</code>，<code>APP</code> 代表多应用，<code>SERVER</code> 代表服务器版本。</p><p>根据上面的配置信息可以看到，<code>app1</code>、<code>app2</code> 设置了 <code>dimension &quot;APP&quot;</code> 所以属于 <code>APP</code> 这个维度，<code>offline</code>、<code>online</code>、<code>admin</code> 设置了 <code>dimension &quot;SERVER&quot;</code> 属于 <code>SERVER</code> 这个维度。</p><p>根据 Product Flavors 的两个维度 APP [app1, app2] 和 SERVER [offline, online, admin] 以及 Build Type [debug, release]，最后会生成以下 Build Variant：</p><ul><li><code>app1AdminDebug</code></li><li><code>app1AdminRelease</code></li><li><code>app1OfflineDebug</code></li><li><code>app1OfflineRelease</code></li><li><code>app1OnlineDebug</code></li><li><code>app1OnlineRelease</code></li><li><code>app2AdminDebug</code></li><li><code>app2AdminRelease</code></li><li><code>app2OfflineDebug</code></li><li><code>app2OfflineRelease</code></li><li><code>app2OnlineDebug</code></li><li><code>app2OnlineRelease</code></li></ul><p>是不是每个应用都有 3 个服务器版本，每个版本都有 <code>debug</code> 和 <code>release</code> 包。</p><h2 id="配置不同的包名"><a href="#配置不同的包名" class="headerlink" title="配置不同的包名"></a>配置不同的包名</h2><p>我们要实现多应用，必须能安装在同一台手机上。所以不同应用之间的包名得不一样。</p><p>在 <code>APP</code> 维度的 <code>flavor</code> 中设置不同的 <code>applicationId</code>，就可以实现修改应用包名。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app1&#123;</span><br><span class="line">    applicationId <span class="string">'com.imliujun.app1'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app2&#123;</span><br><span class="line">    applicationId <span class="string">'com.imliujun.app2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置后，<code>app1</code> 和 <code>app2</code> 就能够安装在同一台手机上，也能同时上传应用商店。</p><p>有一点大家切记，<code>AndroidManifest.xml</code> 中的 <code>package</code> 不需要去修改，R 文件的路径是根据这个 <code>package</code> 来生成的。如果对 <code>package</code> 进行修改，R 文件的路径也会改变，所有引用到 R 文件的类都需要进行修改。</p><h2 id="动态配置-URL-和版本号"><a href="#动态配置-URL-和版本号" class="headerlink" title="动态配置 URL 和版本号"></a>动态配置 URL 和版本号</h2><p>既然每个 Build Variant 都是由不同维度的 Product Flavors 和 Build Type 组合而来，我们肯定不能像上一篇文章一样将服务器的 URL 配置在 <code>offline</code>、<code>online</code>、<code>admin</code> 中了，因为 <code>app1Offline</code> 和 <code>app2Offline</code> 同样是测试服，但不是同一个应用 URL 也不一样。</p><p>这个时候就需要通过 task 操作来根据不同的组合设置不同的数据了。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    <span class="comment">//判断当前的 flavorName 是什么版本</span></span><br><span class="line">    <span class="keyword">switch</span> (variant.flavorName) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app1Admin"</span>:</span><br><span class="line">            <span class="comment">//这是 app1 的超管版本，设置超管服务器 URL</span></span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://admin.app1domain.com/\""</span></span><br><span class="line">            <span class="comment">//判断当前是 `debug` 包还是 `release` 包，设置版本号</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getTestVersionName() + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(rootProject.ext.APP1_VERSION_NAME + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app1Offline"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://offline.app1domain.com/\""</span></span><br><span class="line">            variant.mergedFlavor.setVersionName(getTestVersionName())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app1Online"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://online.app1domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getTestVersionName())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app2Admin"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://admin.app2domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getApp2TestVersionName() + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(rootProject.ext.APP2_VERSION_NAME + <span class="string">"-管理员"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app2Offline"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://offline.app2domain.com/\""</span></span><br><span class="line">            variant.mergedFlavor.setVersionName(getApp2TestVersionName())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"app2Online"</span>:</span><br><span class="line">            variant.buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>,</span><br><span class="line">                    <span class="string">"\"https://online.app2domain.com/\""</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"debug"</span> == variant.buildType.getName()) &#123;</span><br><span class="line">                variant.mergedFlavor.setVersionName(getApp2TestVersionName())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个 APP 的服务器 URL 和版本号不一致，所以通过 task 来动态设置。</p><h2 id="配置应用名"><a href="#配置应用名" class="headerlink" title="配置应用名"></a>配置应用名</h2><p>不同的应用配置自己的应用名：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resValue <span class="string">"string"</span>, <span class="string">"app_name"</span>, <span class="string">"APP1"</span></span><br></pre></td></tr></table></figure><p>这行代码的意思和在 <code>strings.xml</code> 中定义一个 String 值是一样的。不过这里通过 Gradle 配置了 <code>app_name</code> 就不能在 <code>strings.xml</code> 中再定义了，会报错提示有冲突。</p><h2 id="配置应用签名"><a href="#配置应用签名" class="headerlink" title="配置应用签名"></a>配置应用签名</h2><p>如果多个应用使用同一个签名文件，按照上一篇文章写的在 <code>buildTypes</code> 的 <code>release</code> 和 <code>debug</code> 中配置就可以。但是每个应用的签名文件不一样呢？</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line"></span><br><span class="line">    app1 &#123;</span><br><span class="line">        storeFile <span class="keyword">file</span>(<span class="string">"app1.jks"</span>)</span><br><span class="line">        storePassword <span class="string">"111111"</span></span><br><span class="line">        keyAlias <span class="string">"app1"</span></span><br><span class="line">        keyPassword <span class="string">"111111"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app2 &#123;</span><br><span class="line">        storeFile <span class="keyword">file</span>(<span class="string">"app2.jks"</span>)</span><br><span class="line">        storePassword <span class="string">"111111"</span></span><br><span class="line">        keyAlias <span class="string">"app2"</span></span><br><span class="line">        keyPassword <span class="string">"111111"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置多个签名文件，在 <code>APP</code> 这个维度的 <code>flavor</code> 中配置签名信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app1&#123;</span><br><span class="line">    signingConfig signingConfigs.app1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app2&#123;</span><br><span class="line">    signingConfig signingConfigs.app2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以针对不同的应用设置不同的签名文件了。<strong>但是，还有一个要注意的地方，这个坑我以前没填上，而是绕远路绕过去了，现在我来填上它！</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">debug &#123;</span><br><span class="line">    signingConfig <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要在 <code>debug</code> 中将签名文件的配置置空，不然 Build Type 的权限比 Product Flavors 要高，而 <code>debug</code> Build Type(构建类型) 会自动使用 <code>debug</code> SigningConfig (签名配置)，这样一来就将 <code>flavor</code> 中配置的签名信息给覆盖掉了。导致的问题就是编译 <code>release</code> 包没有问题，编译 <code>debug</code> 包就不能使用某些需要校验签名的第三方SDK了。</p><h2 id="配置不同应用的代码和资源"><a href="#配置不同应用的代码和资源" class="headerlink" title="配置不同应用的代码和资源"></a>配置不同应用的代码和资源</h2><p>终于来到重头戏了，现在只需要更换 UI、文案或者某些界面布局和逻辑代码就大功告成啦。</p><p>首先，建立每个应用对应的 <code>sourceSets</code> 目录，比如：</p><ul><li>app1 的 <code>sourceSets</code> 位置是 <code>src/app1/</code></li><li>app2 的 <code>sourceSets</code> 位置是 <code>src/app2/</code></li></ul><p><code>app1</code> 是已经开发完成的应用，只需要换 UI、文案就成了 <code>app2</code>，在 <code>src/app2/</code> 目录下再新建 <code>res</code> 目录，将需要替换的切图命名和 <code>app1</code> 中的命名保持一致放入 <code>res</code> 对应的目录下就完美换肤了。</p><p>文案同理，将需要替换的字符串在 <code>src/app2/res/values/strings.xml</code> 中再写一份，保持 <code>name</code> 相同，其中的内容随便替换。</p><p>布局文件、style、color 替换的规则同上。</p><p>微信登录、分享、支付的回调是返回到 <code>{应用包名.wxapi.WXEntryActivity}</code>、<code>{应用包名.wxapi.WXPayEntryActivity}</code> 这两个 Activity。</p><p>我们在 <code>app1</code> 和 <code>app2</code> 中都放入这两个回调 Activity：</p><p><img src="http://images.imliujun.com/static/images/Gradle/sourceSets1.png" alt="sourceSets 文件目录"></p><p>然后在 <code>AndroidManifest.xml</code> 文件中动态配置 Activity 的包名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 微信分享回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"$&#123;APPLICATIONID&#125;.wxapi.WXEntryActivity"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 微信支付的回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"$&#123;APPLICATIONID&#125;.wxapi.WXPayEntryActivity"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>APPLICATIONID</code> 占位符在 Gradle 中设置：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manifestPlaceholders = [APPLICATIONID : applicationId]</span><br></pre></td></tr></table></figure><p>如果使用了 <code>ShareSDK</code> 做第三方分享和登录，需要配置 <code>ShareSDK.xml</code> 放到 <code>assets</code> 文件夹下，将 <code>main/assets/ShareSDK.xml</code> 复制一份到 <code>app2/assets/ShareSDK.xml</code>，将里面的第三方 APP ID 和 APP KEY 替换一下就可以了。</p><p>项目如果使用了 <code>ContentProvider</code> 要注意替换 <code>authorities</code>，如果 <code>authorities</code> 里面的值是一样的，手机上只能装一个应用哦，可以和上面动态配置 Activity 包名一样操作，用信鸽 SDK 演示一下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 【必须】 【注意】authorities修改为 包名.AUTH_XGPUSH, 如demo的包名为：com.qq.xgdemo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.tencent.android.tpush.XGPushProvider"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:authorities</span>=<span class="string">"$&#123;APPLICATIONID&#125;.AUTH_XGPUSH"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面的内容基本涉及到所有的方面，其他的细节也好，特殊的需求定制也好，使用上面的方式去处理都能够解决。希望大家不要光学会复制粘贴，要掌握其原理，遇到类似的需求就能举一反三。</p><blockquote><p>demo地址：<a href="https://github.com/imliujun/GradleTest" target="_blank" rel="noopener">https://github.com/imliujun/GradleTest</a></p></blockquote><p>总结一下技术点：</p><ul><li><code>manifestPlaceholders</code> -&gt; <code>AndroidManifest.xml</code> 占位符</li><li><code>buildConfigField</code> -&gt; <code>BuildConfig</code> 动态配置常量值</li><li><code>resValue</code> -&gt; <code>String.xml</code> 动态配置字符串</li><li><code>signingConfigs</code> -&gt; 配置签名文件</li><li><code>productFlavors</code> -&gt; 产品定制多版本</li><li><code>flavorDimensions</code> -&gt; 为产品定制设置多个维度</li><li><code>android.applicationVariants</code> -&gt; 操作 task</li></ul><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><ul><li><a href="http://www.imliujun.com/gradle1.html">使用 Gradle 对应用进行个性化定制</a></li><li><a href="http://www.imliujun.com/gradle2.html">Android Studio 3.0 上 Gradle 改动</a></li></ul><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img src="http://images.imliujun.com/static/images/wx_qrcode.gif" alt="公众号：大脑好饿 "></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在文章 &lt;a href=&quot;http://www.imliujun.com/gradle1.html&quot;&gt;使用 Gradle 对应用进行个性化定制&lt;/a&gt; 中，我们能够针对一个应用的正式服、测试服、超管服等其他版本，进行个性化定制。&lt;br&gt;这一篇文章我们来点大动作，让你用一套代
      
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://www.imliujun.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 3.0 上 Gradle 改动</title>
    <link href="http://www.imliujun.com/gradle2.html"/>
    <id>http://www.imliujun.com/gradle2.html</id>
    <published>2017-07-11T07:02:19.000Z</published>
    <updated>2019-03-17T14:57:10.567Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章：<a href="http://www.imliujun.com/gradle1.html">使用 Gradle 对应用进行个性化定制</a> 中使用到了 <code>productFlavors</code>，有同学评论在 Android Studio 3.0 上编译不了。</p><p><a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html" target="_blank" rel="noopener">官方文档</a>：</p><p><img src="http://images.imliujun.com/static/images/Gradle/AndroidStudio3_update.png" alt="官方说明"></p><p>简单解释一下，<code>&#39;com.android.tools.build:gradle:3.0.0-alpha5&#39;</code> 插件 3.0.0 版本包含一个新的依赖机制，强制所有的 <code>flavor</code> 必须配置一个 <code>flavor dimension</code>。</p><p>在上一篇文章的基础上，稍作修改：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置一个默认的 flavorDimensions</span></span><br><span class="line">flavorDimensions <span class="string">"SERVER"</span></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        offline &#123;</span><br><span class="line">            dimension <span class="string">"SERVER"</span> <span class="comment">//设置</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://offline.domain.com/\""</span></span><br><span class="line">            versionName getTestVersionName() <span class="comment">//修改 versionName</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        online &#123;</span><br><span class="line">            dimension <span class="string">"SERVER"</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://online.domain.com/\""</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        admin &#123;</span><br><span class="line">            dimension <span class="string">"SERVER"</span></span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://admin.domain.com/\""</span></span><br><span class="line">            versionName rootProject.ext.APP1_VERSION_NAME + <span class="string">"-管理员"</span> <span class="comment">//修改 versionName</span></span><br><span class="line">            manifestPlaceholders.UMENG_CHANNEL_VALUE = <span class="string">"admin"</span> <span class="comment">//修改渠道名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要就是给 <code>flavor</code> 设置默认的 <code>Dimension</code> ，这样编译就没有问题了。</p><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.imliujun.com/gradle1.html">使用 Gradle 对应用进行个性化定制</a></p><p><a href="http://www.imliujun.com/gradle3.html">使用 Gradle 实现一套代码开发多个应用</a></p><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img src="http://images.imliujun.com/static/images/wx_qrcode.gif" alt="公众号：大脑好饿 "></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上一篇文章：&lt;a href=&quot;http://www.imliujun.com/gradle1.html&quot;&gt;使用 Gradle 对应用进行个性化定制&lt;/a&gt; 中使用到了 &lt;code&gt;productFlavors&lt;/code&gt;，有同学评论在 Android Studio 3.0
      
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://www.imliujun.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>使用 Gradle 对应用进行个性化定制</title>
    <link href="http://www.imliujun.com/gradle1.html"/>
    <id>http://www.imliujun.com/gradle1.html</id>
    <published>2017-07-07T08:19:23.000Z</published>
    <updated>2019-03-17T14:57:34.992Z</updated>
    
    <content type="html"><![CDATA[<p>啥也不说了，直接进入主题吧。本篇文章主要根据实际开发中遇到的需求，讲解使用 <code>Gradle</code> 对应用的不同版本进行个性化定制。</p><h1 id="场景介绍"><a href="#场景介绍" class="headerlink" title="场景介绍"></a>场景介绍</h1><ol><li>一般的应用基本上都有正式服和测试服，这个就不需要多说了。但是有些应用可能还有<code>超管服务器</code>专供运营人员使用，对应用内的一些内容进行监管，具有一些管理员才有的操作权限。</li><li>开发过程中发布测试服务器的安装包需要在版本号后面增加版本序号，超管服务器的包在版本号后面增加<code>管理员</code>文字，线上包则正常显示版本号。</li><li>每次打包 <code>versionCode</code> 自增，避免发版时忘记手动修改导致老版本不能覆盖安装。</li><li>超管包的渠道名为 <code>admin</code>，日常运行的 <code>debug</code> 包渠道名为 <code>test</code>，上线的包使用加固软件进行多渠道加固。</li><li><code>debug</code> 包和 <code>release</code> 包使用同样的签名，避免直接运行的 <code>debug</code> 包因为签名问题不能使用需要校验签名的第三方服务，比如：QQ 登录，微信登录，高德地图。</li><li><code>debug</code> 包打印日志信息，<code>release</code> 包不打印日志信息</li></ol><p>以上某些场景从我工作以来就一直存在，以前用 <code>eclipse</code> 开发时除了每次都手动去修改一些开关变量也没啥好办法，可能是因为当时菜 ╮(╯▽╰)╭（如果你们有什么好方法的话）。后来切换到 <code>Android Studio</code> 后使用 <code>Gradle</code> 进行依赖管理已经让人很是欣喜，既然如此能不能使用 <code>Gradle</code> 将以上问题统统解决，完全自动化呢？答案是：必须的。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>先上完整的 <code>Gradle</code> 配置。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">"25.0.3"</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.imliujun.gradle"</span></span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode gitVersionCode()  <span class="comment">//获取 git 的 commit 次数</span></span><br><span class="line">        versionName rootProject.ext.versionName</span><br><span class="line"></span><br><span class="line">        manifestPlaceholders = [UMENG_APP_KEY      : <span class="string">"填你的友盟 APP KEY"</span>,</span><br><span class="line">                                UMENG_CHANNEL_VALUE: <span class="string">"默认的渠道名"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    signingConfigs &#123;</span><br><span class="line"><span class="comment">//在这里配置相关的签名信息</span></span><br><span class="line">        keyStore &#123;</span><br><span class="line">            storeFile <span class="keyword">file</span>(<span class="string">"test.jks"</span>)</span><br><span class="line">            storePassword <span class="string">"111111"</span></span><br><span class="line">            keyAlias <span class="string">"test"</span></span><br><span class="line">            keyPassword <span class="string">"111111"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">// 不显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span></span><br><span class="line">            signingConfig signingConfigs.keyStore <span class="comment">//设置签名文件</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        debug &#123;</span><br><span class="line">            <span class="comment">// 显示Log</span></span><br><span class="line">            buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">            versionNameSuffix <span class="string">"-debug"</span>  <span class="comment">//设置后缀</span></span><br><span class="line">            signingConfig signingConfigs.keyStore  <span class="comment">//设置签名文件</span></span><br><span class="line">            manifestPlaceholders.UMENG_CHANNEL_VALUE = <span class="string">"test"</span> <span class="comment">//修改渠道名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        offline &#123;</span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://offline.domain.com/\""</span></span><br><span class="line">            versionName getTestVersionName() <span class="comment">//修改 versionName</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        online &#123;</span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://online.domain.com/\""</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        admin &#123;</span><br><span class="line">            buildConfigField <span class="string">"String"</span>, <span class="string">"DOMAIN_NAME"</span>, <span class="string">"\"https://admin.domain.com/\""</span></span><br><span class="line">            versionName rootProject.ext.versionName + <span class="string">"-管理员"</span> <span class="comment">//修改 versionName</span></span><br><span class="line">            manifestPlaceholders.UMENG_CHANNEL_VALUE = <span class="string">"admin"</span> <span class="comment">//修改渠道名</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根目录下的 <code>build.gradle</code> 文件进行如下配置，主要是将版本号和测试包的序号抽取出来：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    versionName = <span class="string">"2.0.2"</span></span><br><span class="line">    testNum = <span class="string">"0001"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getTestVersionName() &#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s.%s"</span>, rootProject.ext.versionName,</span><br><span class="line">            rootProject.ext.testNum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> gitVersionCode() &#123;</span><br><span class="line">    <span class="keyword">def</span> <span class="keyword">count</span> = <span class="string">"git rev-list HEAD --count"</span>.execute().text.trim()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>.isInteger() ? <span class="keyword">count</span>.<span class="keyword">toInteger</span>() : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就根据场景来依次介绍对应的配置代码。</p><h2 id="配置服务器版本"><a href="#配置服务器版本" class="headerlink" title="配置服务器版本"></a>配置服务器版本</h2><p>这里创建了三个 flavor，分别是 <code>offline 测试服</code>、<code>online 正式服</code>、<code>admin 超管服</code>。并且通过 <code>buildConfigField</code> 动态配置服务器的 URL 常量值到编译后自动生成的 <code>BuildConfig</code> 类中。</p><p><img src="http://images.imliujun.com/static/images/Gradle/BuildConfig.png" alt="自动生成的 BuildConfig 类" title="BuildConfig"></p><p>图中可以看到，不止有 <code>DOMAIN_NAME</code> 常量值，还有一个 <code>FLAVOR</code> 常量。这个 <code>FLAVOR</code> 常量中的值是 <code>offline</code>，代表当前在 <code>offline</code> 这个版本上面。那怎么切换到其他的服务器呢？</p><p><img src="http://images.imliujun.com/static/images/Gradle/SwitchBuildVariants.png" alt="切换不同的变种版本" title="BuildVariants"></p><p>点开左下角的 <code>Build Variants</code>, 可以自由切换当前运行的版本。需要在管理员包中开启一些高级的功能，可以判断 <code>FLAVOR</code> 的值是不是 <code>admin</code>，如果是的话就显示管理员的操作布局。当然必不可少的要对用户权限进行校验哦。</p><h2 id="定制-versionName"><a href="#定制-versionName" class="headerlink" title="定制 versionName"></a>定制 <code>versionName</code></h2><p>大家看上图 <code>BuildConfig</code> 类中 <code>VERSION_NAME</code> 常量的值为 <code>2.0.2.0001-debug</code>，当前是测试服的 <code>debug</code> 包，所以 <code>versionName</code> 应该是正常的 2.0.2 版本后面拼上当前出包的序号 0001 ，再拼上 <code>debug</code> 的后缀，所以完整的版本号是 <code>2.0.2.0001-debug</code>。</p><p>看看不同服务器版本的 <code>VERSION_NAME</code> ：</p><ul><li><code>offlineRelease</code> 版本为 <code>2.0.2.0001</code></li><li><code>offlineDebug</code>   版本为 <code>2.0.2.0001-debug</code></li><li><code>adminRelease</code> 版本为 <code>2.0.2-管理员</code></li><li><code>adminDebug</code>   版本为 <code>2.0.2-管理员-debug</code></li><li><code>onlineRelease</code> 版本为 <code>2.0.2</code></li><li><code>onlineDebug</code>   版本为 <code>2.0.2-debug</code></li></ul><p>如果我们接口需要上传版本号给服务器呢？肯定不能直接上传这些定制化后的 <code>VERSION_NAME</code>，那么我们在 <code>Gradle</code> 中增加一个 <code>buildConfigField</code> 将原始的版本号存起来就好了。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buildConfigField <span class="string">"String"</span>, <span class="string">"versionNumber"</span>, <span class="string">"\"$&#123;rootProject.ext.versionName&#125;\""</span></span><br></pre></td></tr></table></figure><h2 id="versionCode-自增"><a href="#versionCode-自增" class="headerlink" title="versionCode 自增"></a><code>versionCode</code> 自增</h2><p>这里采用了主流的方式，使用 <code>git</code> 的 <code>commit</code> 次数作为 <code>versionCode</code> 的值。不用担心这个值会超过 <code>int</code> 的上限，你得敲烂多少键盘才能提交 2147483648次 <code>commit</code>。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> gitVersionCode() &#123;</span><br><span class="line">    <span class="keyword">def</span> <span class="keyword">count</span> = <span class="string">"git rev-list HEAD --count"</span>.execute().text.trim()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">count</span>.isInteger() ? <span class="keyword">count</span>.<span class="keyword">toInteger</span>() : <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="个性化渠道名"><a href="#个性化渠道名" class="headerlink" title="个性化渠道名"></a>个性化渠道名</h2><p><code>Gradle</code> 多渠道打包的文章太多了，相关的基础我就不讲了。简单讲下本文相关的配置吧。</p><p>通过定义 <code>manifestPlaceholders</code> 键值对，在 <code>AndroidManifest.xml</code> 文件中使用占位符的方式动态输入 <code>UMENG_APPKEY</code> 和 <code>UMENG_CHANNEL</code> 。</p><p>然后在 <code>debug</code> 的 <code>buildType</code> 中修改渠道名为 <code>test</code>，在 <code>admin</code> 的 <code>Flavor</code> 中修改渠道名为 <code>admin</code>。如果选择 <code>adminDebug</code> 版本，则渠道名为 <code>test</code>，<code>buildType</code> 中的配置会覆盖掉 <code>Flavor</code> 中的配置。</p><p>由于我们线上使用第三方加固，所以多渠道包就交给第三方加固软件来生成了。</p><p>关于多渠道打包我还有两句话要说，以前使用 <code>Gradle</code> 进行多渠道打包，通过代码自定义修改 <code>apk</code> 文件的输出路径，<code>Android Studio</code> 编译的时候时不时的报一些文件找不到的错误，以前都是通过在 <code>Gradle</code> 文件中随便修改一点东西然后刷新一下 <code>Gradle</code> 文件来解决。现在我打包不修改输出路径，再也没遇到以前的那些问题了。</p><p>建议大家使用 <code>assemble</code> 命令来进行打包，比如我要出一个测试包使用 <code>./gradlew assembleOfflineRelease</code> 命令，<code>apk</code> 文件生成在 <code>/build/outputs/apk/</code> 目录下。直接执行 <code>assemble</code> 命令是编译 <code>Build Variants</code> 中的所有包，如果你要编译指定版本的包，直接在 <code>assemble</code> 命令后面拼上指定的 <code>Build Variant</code> 就好了。</p><h2 id="debug-包使用-release-签名"><a href="#debug-包使用-release-签名" class="headerlink" title="debug 包使用 release 签名"></a><code>debug</code> 包使用 <code>release</code> 签名</h2><p>这个问题在 <code>eclipse</code> 时代，可以直接在设置里面配置 <code>debug</code> 签名文件为 <code>release</code> 的签名文件。<br>用 <code>Android Studio</code> 只需要在 <code>Gradle</code> 中配置就好了。</p><p>首先配置签名文件的信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line"> <span class="comment">//在这里配置相关的签名信息</span></span><br><span class="line">  keyStore &#123;</span><br><span class="line">    storeFile <span class="keyword">file</span>(<span class="string">"test.jks"</span>)</span><br><span class="line">    storePassword <span class="string">"111111"</span></span><br><span class="line">    keyAlias <span class="string">"test"</span></span><br><span class="line">    keyPassword <span class="string">"111111"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>buildTypes</code> 中设置签名信息：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">  release &#123;</span><br><span class="line">    signingConfig signingConfigs.keyStore <span class="comment">//设置签名文件</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debug &#123;</span><br><span class="line">    signingConfig signingConfigs.keyStore  <span class="comment">//设置签名文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日志开关"><a href="#日志开关" class="headerlink" title="日志开关"></a>日志开关</h2><p>这个太简单了，不想单独列出来。不过上面场景里面提出来了，就简单一行代码展示吧。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">release &#123;</span><br><span class="line"><span class="comment">// 不显示Log</span></span><br><span class="line">buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"false"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">debug &#123;</span><br><span class="line"><span class="comment">// 显示Log</span></span><br><span class="line">buildConfigField <span class="string">"boolean"</span>, <span class="string">"LOG_DEBUG"</span>, <span class="string">"true"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在日志工具类中使用 <code>BuildConfig</code> 类中的 <code>LOG_DEBUG</code> 常量来判断当前是否应该输出日志。</p><p>当然也可以用这个开关来控制开启严格模式等其他只适合在 <code>debug</code> 模式下开启的设置。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>唧唧歪歪说了这么多，在懂的人眼中自然很简单，在对 <code>gradle</code> 一点都不了解的人眼中就可以直接复制过去用了。当然我是不建议直接复制，毕竟需求稍微一改，你可能就束手无策了。建议大家还是以理解为主，掌握其原理自然一通百通。</p><h1 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h1><p><a href="http://www.imliujun.com/gradle2.html">Android Studio 3.0 上 Gradle 改动</a></p><p><a href="http://www.imliujun.com/gradle3.html">使用 Gradle 实现一套代码开发多个应用</a></p><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img title="公众号：大脑好饿" src="http://images.imliujun.com/static/images/wx_qrcode.gif"></p>]]></content>
    
    <summary type="html">
    
      本篇文章主要根据实际开发中遇到的需求，讲解使用 `Gradle` 对应用的不同版本进行个性化定制。避免手动修改一些开关变量，导致误操作等等。
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="Gradle" scheme="http://www.imliujun.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Lottie -- 轻松实现动态加载直播礼物动画</title>
    <link href="http://www.imliujun.com/Lottie%E5%BA%93%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%92%AD%E7%A4%BC%E7%89%A9%E5%8A%A8%E7%94%BB.html"/>
    <id>http://www.imliujun.com/Lottie库实现直播礼物动画.html</id>
    <published>2017-04-24T23:27:11.000Z</published>
    <updated>2019-03-17T14:57:10.567Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文已授权微信公众号：鸿洋（hongyangAndroid）原创首发。</p></blockquote><p>本文主要讲解 <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">Lottie</a> 库动态加载 SD 卡上带图片资源的动画，并对各种机型做全屏适配。</p><p>Lottie 的优点：</p><ul><li><p>跨平台，支持 Android、iOS、React Native 平台</p></li><li><p>支持实时渲染 After Effects 动画，让 app 加载动画像加载图片一样简单。</p></li><li><p>资源动态下载，减小 APP 体积，上线新的动画效果不需要发版</p></li><li><p>更多优点等你发现</p></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><p>做直播软件肯定少不了各种礼物的动画效果，当上线新的礼物时，不仅 Android、ios 客户端需要实现新的动画效果，还很难兼容老版本。</p></li><li><p>平常过节日的时候，很多 APP 都会做各种活动，修改启动页的图片，更改应用内的按钮图标，如果涉及到动画，那么肯定需要提前一两个版本将节日的动画实现代码预制到应用内</p></li><li><p>更多应用场景等你探索</p></li></ul><p>现在有了 Lottie，可以让设计师使用 After Effects 进行动画设计，通过 Bodymovin 插件导出 json 文件，将动画资源打包上传到服务器后，客户端通过动态下载资源文件来执行动画。这样上线新的礼物，只需要将资源文件上传，客户端不需要发版完全可以执行新礼物的动画效果。流程如下：</p><img title="流程图" src="http://images.imliujun.com/static/images/Lottie/Lottie_9.jpeg">  <h2 id="使用详解"><a href="#使用详解" class="headerlink" title="使用详解"></a>使用详解</h2><p>本文就以直播间播放动画为例子来讲解具体的实现方案，先看下动画效果：</p><img title="动画效果" src="http://images.imliujun.com/static/images/Lottie/Lottie_1.gif">  <p>直播软件的大礼物一般都是飞机、跑车、航母、花瓣雨等，这些物品不是简单的线条、色块所能绘制，所以使用图片文件来实现动画效果。<br>导出的动画资源包括一个 json 文件和一组图片文件：</p><img title="资源文件目录" src="http://images.imliujun.com/static/images/Lottie/Lottie_2.jpg"><p>将这些文件打成压缩包上传到后台，客户端下载压缩包进行解压，使用 Lottie 加载本地资源执行动画：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">File jsonFile = <span class="keyword">new</span> File(giftDir, <span class="string">"79.json"</span>);</span><br><span class="line">File imagesDir = <span class="keyword">new</span> File(giftDir, <span class="string">"images"</span>);</span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (jsonFile.exists()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(jsonFile);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fis == <span class="keyword">null</span> || !imagesDir.exists()) &#123;</span><br><span class="line">    showLocalAnimation(gift);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> String absolutePath = imagesDir.getAbsolutePath();</span><br><span class="line"><span class="comment">//提供一个代理接口从 SD 卡读取 images 下的图片</span></span><br><span class="line">mLottieAnimationView.setImageAssetDelegate(<span class="keyword">new</span> ImageAssetDelegate() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">fetchBitmap</span><span class="params">(LottieImageAsset asset)</span> </span>&#123;</span><br><span class="line">        BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        opts.inScaled = <span class="keyword">true</span>;</span><br><span class="line">        opts.inDensity = <span class="number">160</span>;</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(absolutePath + File.separator +</span><br><span class="line">                asset.getFileName(), opts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//从文件流中加载 json 数据</span></span><br><span class="line">LottieComposition.Factory.fromInputStream(<span class="keyword">this</span>, fis, <span class="keyword">new</span> OnCompositionLoadedListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompositionLoaded</span><span class="params">(LottieComposition composition)</span> </span>&#123;</span><br><span class="line">        mLottieAnimationView.setVisibility(View.VISIBLE);</span><br><span class="line">        mLottieAnimationView.setComposition(composition);</span><br><span class="line">        mLottieAnimationView.playAnimation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>关键的代码就是设置图片资源代理，去 SD 卡解析图片文件，那么怎么知道该解析哪一张图片呢？咱们来看看 json 文件里面的内容：</p><img title="json文件" src="http://images.imliujun.com/static/images/Lottie/Lottie_7.jpg">  <p><code>assets</code> 字段是图片资源的数组，具体的解析的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LottieImageAsset</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, String id, String fileName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Factory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> LottieImageAsset <span class="title">newInstance</span><span class="params">(JSONObject imageJson)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LottieImageAsset(</span><br><span class="line">                  imageJson.optInt(<span class="string">"w"</span>),     <span class="comment">//width</span></span><br><span class="line">                  imageJson.optInt(<span class="string">"h"</span>),     <span class="comment">//height</span></span><br><span class="line">                  imageJson.optString(<span class="string">"id"</span>), <span class="comment">//id</span></span><br><span class="line">                  imageJson.optString(<span class="string">"p"</span>)   <span class="comment">//fileName</span></span><br><span class="line">               );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接根据 <code>ImageAssetDelegate</code> 代理类的 <code>fetchBitmap(LottieImageAsset asset)</code> 方法中的 <code>LottieImageAsset</code> 参数获取当前需要解析的图片文件名，去 images 文件夹下面解析对应的文件就OK啦。</p><p>这几行代码就实现了从SD卡动态加载动画，那么这样就算完工了吗？看看上面的动画是不是感觉有什么地方不对劲？好吧，作为一个 Android 软件工程师，一定要记住2个字 <strong>适配</strong> <strong>适配</strong> <strong>适配</strong></p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>动画是全屏的效果，小幽灵也是从屏幕外飞进来的没有问题，为什么背景图离屏幕两边有空隙呢？</p><img title="没有屏幕适配的效果" src="http://images.imliujun.com/static/images/Lottie/Lottie_4.jpg"><p>再来看看这个动图，<strong>为什么隐藏虚拟按键就全屏了呢？</strong></p><img title="隐藏虚拟按键" src="http://images.imliujun.com/static/images/Lottie/Lottie_5.gif"><p>再来看看 json 文件里面的内容：</p><img title="json文件" src="http://images.imliujun.com/static/images/Lottie/Lottie_7.jpg"><p>背景图的宽高和画布的宽高是一样的，那么为什么有虚拟按键的时候背景图就不全屏呢？原因其实很简单，来看一下 Lottie 是怎么解析 json 数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> LottieComposition <span class="title">fromJsonSync</span><span class="params">(Resources res, JSONObject json)</span> </span>&#123;</span><br><span class="line">      Rect bounds = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">float</span> scale = res.getDisplayMetrics().density;</span><br><span class="line">      <span class="keyword">int</span> width = json.optInt(<span class="string">"w"</span>, -<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">int</span> height = json.optInt(<span class="string">"h"</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (width != -<span class="number">1</span> &amp;&amp; height != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> scaledWidth = (<span class="keyword">int</span>) (width * scale);</span><br><span class="line">        <span class="keyword">int</span> scaledHeight = (<span class="keyword">int</span>) (height * scale);</span><br><span class="line">        bounds = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, scaledWidth, scaledHeight);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">long</span> startFrame = json.optLong(<span class="string">"ip"</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">long</span> endFrame = json.optLong(<span class="string">"op"</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">int</span> frameRate = json.optInt(<span class="string">"fr"</span>, <span class="number">0</span>);</span><br><span class="line">      LottieComposition composition =</span><br><span class="line">          <span class="keyword">new</span> LottieComposition(bounds, startFrame, endFrame, frameRate, scale);</span><br><span class="line">      JSONArray assetsJson = json.optJSONArray(<span class="string">"assets"</span>);</span><br><span class="line">      parseImages(assetsJson, composition);</span><br><span class="line">      parsePrecomps(assetsJson, composition);</span><br><span class="line">      parseLayers(json, composition);</span><br><span class="line">      <span class="keyword">return</span> composition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析出了动画的宽高、帧率等信息，这里将解析出来的宽高乘上了屏幕的像素密度，然后设置渲染区域的边界，为了便于理解，本文将其称为画布。我这台手机是 1080P 的分辨率，density = 3，scaledWidth = 2250，scaledHeight = 4002，现在缩放后的画布宽高比手机屏幕大了太多，如果动画在这种尺寸下进行渲染肯定不行。所以 LottieAnimationView 加载 Composition 时判断了画布的宽高如果大于手机屏幕的宽高就进行等比例缩小：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComposition</span><span class="params">(@NonNull LottieComposition composition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L.DBG) &#123;</span><br><span class="line">      Log.v(TAG, <span class="string">"Set Composition \n"</span> + composition);</span><br><span class="line">    &#125;</span><br><span class="line">    lottieDrawable.setCallback(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isNewComposition = lottieDrawable.setComposition(composition);</span><br><span class="line">    <span class="keyword">if</span> (!isNewComposition) &#123;</span><br><span class="line">      <span class="comment">// We can avoid re-setting the drawable, and invalidating the view, since the composition</span></span><br><span class="line">      <span class="comment">// hasn't changed.</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重点在这里，根据屏幕宽高对画布进行等比例缩放</span></span><br><span class="line">    <span class="keyword">int</span> screenWidth = Utils.getScreenWidth(getContext());</span><br><span class="line">    <span class="keyword">int</span> screenHeight = Utils.getScreenHeight(getContext());</span><br><span class="line">    <span class="keyword">int</span> compWidth = composition.getBounds().width();</span><br><span class="line">    <span class="keyword">int</span> compHeight = composition.getBounds().height();</span><br><span class="line">    <span class="comment">//如果画布的宽高大于屏幕宽高，计算缩放比</span></span><br><span class="line">    <span class="keyword">if</span> (compWidth &gt; screenWidth ||</span><br><span class="line">        compHeight &gt; screenHeight) &#123;</span><br><span class="line">      <span class="keyword">float</span> xScale = screenWidth / (<span class="keyword">float</span>) compWidth;</span><br><span class="line">      <span class="keyword">float</span> yScale = screenHeight / (<span class="keyword">float</span>) compHeight;</span><br><span class="line">      <span class="comment">//按比例缩小</span></span><br><span class="line">      setScale(Math.min(xScale, yScale));</span><br><span class="line">      Log.w(L.TAG, String.format(</span><br><span class="line">          <span class="string">"Composition larger than the screen %dx%d vs %dx%d. Scaling down."</span>,</span><br><span class="line">          compWidth, compHeight, screenWidth, screenHeight));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If you set a different composition on the view, the bounds will not update unless</span></span><br><span class="line">    <span class="comment">// the drawable is different than the original.</span></span><br><span class="line">    setImageDrawable(<span class="keyword">null</span>);</span><br><span class="line">    setImageDrawable(lottieDrawable);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.composition = composition;</span><br><span class="line"></span><br><span class="line">    requestLayout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算出宽和高的缩放比后，为了让画布小于屏幕，所以取较小的一个比例，调用 setScale 方法将缩放比设置到 lottieDrawable 上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScale</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</span><br><span class="line">    lottieDrawable.setScale(scale);</span><br><span class="line">    <span class="keyword">if</span> (getDrawable() == lottieDrawable) &#123;</span><br><span class="line">      setImageDrawable(<span class="keyword">null</span>);</span><br><span class="line">      setImageDrawable(lottieDrawable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lottieDrawable 的 setScale 方法保存了缩放比，并且更新了绘制的矩形范围：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScale</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.scale = scale;</span><br><span class="line">    updateBounds();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到矩形的范围是根据画布的宽高进行了等比例的缩放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (composition == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    setBounds(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) (composition.getBounds().width() * scale),</span><br><span class="line">        (<span class="keyword">int</span>) (composition.getBounds().height() * scale));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在画布被缩放了，然而背景图呢？来看一下 lottieDrawable 的绘制代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compositionLayer == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix.reset();</span><br><span class="line">    matrix.preScale(scale, scale);</span><br><span class="line">    compositionLayer.draw(canvas, matrix, alpha);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>lottieDrawable 在绘制的时候对 matrix 设置了缩放比，然后调用了 compositionLayer 去进行具体的绘制。这个 compositionLayer 就是所有图层的一个组合，它有一个<code>List&lt;BaseLayer&gt; layers</code>属性， 这个属性就是 json 文件里面的<code>layers</code>节点解析出来的图层列表，每个图层中间还包含一些属性动画。<code>compositionLayer.draw(canvas, matrix, alpha)</code>方法中主要调用了 drawLayer 抽象方法由图层的具体实现类执行绘制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLayer</span><span class="params">(Canvas canvas, Matrix parentMatrix, <span class="keyword">int</span> parentAlpha)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = layers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">      layers.get(i).draw(canvas, parentMatrix, parentAlpha);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 CompositionLayer 类的 drawLayer 方法遍历 layers 集合进行循环绘制，这里是使用图片文件做的动画，对应的 Layer 实现类为 ImageLayer。 看下 ImageLayer 的绘制方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawLayer</span><span class="params">(@NonNull Canvas canvas, Matrix parentMatrix, <span class="keyword">int</span> parentAlpha)</span> </span>&#123;</span><br><span class="line">    Bitmap bitmap = getBitmap();</span><br><span class="line">    <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    paint.setAlpha(parentAlpha);</span><br><span class="line">    canvas.save();</span><br><span class="line">    canvas.concat(parentMatrix);</span><br><span class="line">    src.set(<span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</span><br><span class="line">    dst.set(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) (bitmap.getWidth() * density), (<span class="keyword">int</span>) (bitmap.getHeight() * density));</span><br><span class="line">    canvas.drawBitmap(bitmap, src, dst , paint);</span><br><span class="line">    canvas.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getBitmap() 方法会调用到一开始设置的代理类 ImageAssetDelegate ，从 SD 卡加载图片。  </p><p>代码中调用了 canvas 的<code>save</code>、<code>restore</code>方法来进行图层的叠加绘制，从 lottieDrawable 的<code>draw</code>方法传递下来的<code>matrix</code>用到了<code>concat</code>方法上，对 bitmap 进行了等比缩放。</p><p>整个流程跑下来，Lottie 库的动画渲染机制已经基本了解，背景图没有全屏展示的原因如下：</p><p><strong>背景图的长宽比是 16 : 9，手机屏幕的长宽比也是 16 : 9，但是因为底部的虚拟按键占了一部分的高度，屏幕可用空间的长宽比大约为 3 : 2，所以导致背景图不能铺满屏幕</strong></p><h2 id="全屏适配"><a href="#全屏适配" class="headerlink" title="全屏适配"></a>全屏适配</h2><p>动画不能全屏有两种情况，一种是手机长宽比和画布的长宽比是相同的，但是状态栏、导航栏占了屏幕一部分空间导致不能全屏，使用方案一可以解决问题。还有一种情况是手机屏幕长宽比和画布的长宽比就是不一样，毕竟 Android 机型这么多，有几台奇葩手机很正常，那么使用方案二可以实现全屏。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>在执行动画的界面隐藏虚拟按键，或者将虚拟按键设置为透明浮在布局上面，这样屏幕的长宽比和画布的长宽比一样就没有问题。目前市面上的手机基本上都是 720P、1080P、2K 等分辨率，这些分辨率都是 16 : 9 的尺寸。</p><p>状态栏和虚拟按键透明悬浮在布局上面，设置样式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentNavigation"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏虚拟按键通过代码设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Window window = getWindow();</span><br><span class="line"><span class="keyword">int</span> visibility = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION |</span><br><span class="line">                View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN |</span><br><span class="line">                View.SYSTEM_UI_FLAG_LAYOUT_STABLE |</span><br><span class="line">                View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</span><br><span class="line">    window.setStatusBarColor(ContextCompat</span><br><span class="line">                    .getColor(getActivity(), android.R.color.transparent));</span><br><span class="line">    visibility |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">    visibility |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;</span><br><span class="line">&#125;</span><br><span class="line">window.getDecorView().setSystemUiVisibility(visibility);</span><br></pre></td></tr></table></figure><p>使用代码隐藏虚拟按键需要注意一点：<strong>界面的切换会导致 setSystemUiVisibility() 的设置被清空，最好是在 onResume() 或者 onWindowFocusChanged() 方法中进行设置。</strong></p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>如果要适配其他长宽比的屏幕，咋办呢？两行代码解决问题，只不过图片有一部分会被裁剪。设置控件的宽高为<code>match_parent</code>，设置<code>android:scaleType</code>为<code>centerCrop</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/lottieAnimationView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lottie 发布才几个月，很多功能还不够完善，缓存机制也比较弱，像这种从 SD 卡动态加载的方式，需要自己去实现缓存逻辑。但是这点小瑕疵掩盖不了牛逼的事实，就目前这个需求来说，已经大大的降低了开发成本。只不过设计师们需要好好练练 AE 了，动画炫不炫就看设计师给不给力啦😆😆</p><p>本文是作者的处女作，如果对大家有帮助，希望大家多多支持，给予作者更多的创作动力，提供更好的作品给大家。  </p><p><center>欢迎关注微信公众号：<strong>大脑好饿</strong>，更多干货等你来尝</center><br><img title="公众号：大脑好饿" src="http://images.imliujun.com/static/images/wx_qrcode.gif"></p>]]></content>
    
    <summary type="html">
    
      Lottie，轻松实现炫酷动画，让 app 加载动画像加载图片一样简单。几分钟时间让你学会动态加载资源实现炫酷礼物动画，完美适配安卓各机型。
    
    </summary>
    
      <category term="Android" scheme="http://www.imliujun.com/categories/Android/"/>
    
    
      <category term="Lottie" scheme="http://www.imliujun.com/tags/Lottie/"/>
    
      <category term="直播" scheme="http://www.imliujun.com/tags/%E7%9B%B4%E6%92%AD/"/>
    
      <category term="动态加载" scheme="http://www.imliujun.com/tags/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="礼物" scheme="http://www.imliujun.com/tags/%E7%A4%BC%E7%89%A9/"/>
    
      <category term="动画" scheme="http://www.imliujun.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.imliujun.com/hello-world.html"/>
    <id>http://www.imliujun.com/hello-world.html</id>
    <published>2015-12-10T10:22:58.000Z</published>
    <updated>2017-06-28T06:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
      
    
    </summary>
    
    
  </entry>
  
</feed>
