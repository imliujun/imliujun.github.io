<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[大脑好饿]]></title>
  <subtitle><![CDATA[补充大脑营养]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.liujun.info/"/>
  <updated>2017-04-26T19:19:24.000Z</updated>
  <id>http://www.liujun.info/</id>
  
  <author>
    <name><![CDATA[LiuJun]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Lottie库实现直播礼物动画]]></title>
    <link href="http://www.liujun.info/2017/04/25/Lottie%E5%BA%93%E5%AE%9E%E7%8E%B0%E7%9B%B4%E6%92%AD%E7%A4%BC%E7%89%A9%E5%8A%A8%E7%94%BB/"/>
    <id>http://www.liujun.info/2017/04/25/Lottie库实现直播礼物动画/</id>
    <published>2017-04-24T23:27:11.000Z</published>
    <updated>2017-04-26T19:19:24.000Z</updated>
    <content type="html"><![CDATA[<p>对 <a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">Lottie</a> 库不了解的可以看下这篇文章<a href="https://juejin.im/entry/589ba3fc128fe1005801704b" target="_blank" rel="external">Airbnb 开源炫酷动画库 Lottie（译）－看看 Airbnb 的工程师怎么说</a></p>
<blockquote>
<p>Lottie 支持 Android、iOS、React Native 平台，支持实时渲染 After Effects 动画，使得 app 中使用动画可以像使用静态资源一样简单。</p>
</blockquote>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>众所周知，做直播软件肯定少不了各种礼物的动画效果，当上线新的礼物时，不仅客户端需要实现新的动画效果，还很难兼容老版本。现在有了 Lottie，可以让设计师使用 After Effects 进行动画设计，通过 Bodymovin 插件导出 json 文件，将动画资源打包上传到服务器后，客户端通过动态下载资源文件来执行动画。这样上线新的礼物，只需要将资源文件上传，客户端不需要发版完全可以执行新礼物的动画效果。</p>
<h2 id="使用详解"><a href="#使用详解" class="headerlink" title="使用详解"></a>使用详解</h2><p>先看下动画效果：</p>
<img title="动画效果" src="http://ooyo0saao.bkt.clouddn.com/static/images/Lottie/Lottie_1.gif">  
<p>具体怎么实现呢？别着急，先来了解一下动画资源文件的结构。由于直播间送出的大礼物一般都是飞机、跑车、航母、花瓣雨等物品，这些物品不是简单的线条、色块能够绘制的出来，所以使用图片文件来实现动画效果。</p>
<p>这样一来设计师导出来的动画资源包括一个 json 文件和一组图片文件：</p>
<img title="资源文件目录" src="http://ooyo0saao.bkt.clouddn.com/static/images/Lottie/Lottie_2.jpg">
<p>将这些文件打成压缩包上传到后台，客户端下载压缩包进行解压，使用 Lottie 加载本地资源执行动画：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">File jsonFile = <span class="keyword">new</span> File(giftDir, <span class="string">"79.json"</span>);</div><div class="line">File imagesDir = <span class="keyword">new</span> File(giftDir, <span class="string">"images"</span>);</div><div class="line">FileInputStream fis = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (jsonFile.exists()) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        fis = <span class="keyword">new</span> FileInputStream(jsonFile);</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (fis == <span class="keyword">null</span> || !imagesDir.exists()) &#123;</div><div class="line">    showLocalAnimation(gift);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">final</span> String absolutePath = imagesDir.getAbsolutePath();</div><div class="line"><span class="comment">//提供一个代理接口从 SD 卡读取 images 下的图片</span></div><div class="line">mLottieAnimationView.setImageAssetDelegate(<span class="keyword">new</span> ImageAssetDelegate() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">fetchBitmap</span><span class="params">(LottieImageAsset asset)</span> </span>&#123;</div><div class="line">        BitmapFactory.Options opts = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">        opts.inScaled = <span class="keyword">true</span>;</div><div class="line">        opts.inDensity = <span class="number">160</span>;</div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeFile(absolutePath + File.separator +</div><div class="line">                asset.getFileName(), opts);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//从文件流中加载 json 数据</span></div><div class="line">LottieComposition.Factory.fromInputStream(<span class="keyword">this</span>, fis, <span class="keyword">new</span> OnCompositionLoadedListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompositionLoaded</span><span class="params">(LottieComposition composition)</span> </span>&#123;</div><div class="line">        mLottieAnimationView.setVisibility(View.VISIBLE);</div><div class="line">        mLottieAnimationView.setComposition(composition);</div><div class="line">        mLottieAnimationView.playAnimation();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>关键的代码就是设置图片资源代理，去 SD 卡解析图片文件，那么怎么知道该解析哪一张图片呢？咱们来看看 json 文件里面的内容：</p>
<img title="json文件" src="http://ooyo0saao.bkt.clouddn.com/static/images/Lottie/Lottie_3.jpg">  
<p><code>assets</code> 字段是图片资源的数组，具体的解析的源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">LottieImageAsset</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, String id, String fileName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.width = width;</div><div class="line">    <span class="keyword">this</span>.height = height;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.fileName = fileName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Factory</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> LottieImageAsset <span class="title">newInstance</span><span class="params">(JSONObject imageJson)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LottieImageAsset(</div><div class="line">                  imageJson.optInt(<span class="string">"w"</span>),     <span class="comment">//width</span></div><div class="line">                  imageJson.optInt(<span class="string">"h"</span>),     <span class="comment">//height</span></div><div class="line">                  imageJson.optString(<span class="string">"id"</span>), <span class="comment">//id</span></div><div class="line">                  imageJson.optString(<span class="string">"p"</span>)   <span class="comment">//fileName</span></div><div class="line">               );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接根据 <code>ImageAssetDelegate</code> 代理类的 <code>fetchBitmap(LottieImageAsset asset)</code> 方法中的 <code>LottieImageAsset</code> 参数获取当前需要解析的图片文件名，去 images 文件夹下面解析对应的文件就OK啦。</p>
<p>这几行代码就实现了从SD卡动态加载动画，那么这样就算完工了吗？看看上面的动画是不是感觉有什么地方不对劲？好吧，作为一个 Android 软件工程师，一定要记住2个字 <strong>适配</strong> <strong>适配</strong> <strong>适配</strong></p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>动画是全屏的效果，小幽灵也是从屏幕外飞进来的没有问题，为什么背景图离屏幕两边有空隙呢？</p>
<img title="没有屏幕适配的效果" src="http://ooyo0saao.bkt.clouddn.com/static/images/Lottie/Lottie_4.jpg">
<p>再来看看这个动图，<strong>为什么隐藏虚拟按键就全屏了呢？</strong></p>
<img title="隐藏虚拟按键" src="http://ooyo0saao.bkt.clouddn.com/static/images/Lottie/Lottie_5.gif">
<p>再来看看 json 文件里面的内容：</p>
<img title="json文件" src="http://ooyo0saao.bkt.clouddn.com/static/images/Lottie/Lottie_3.jpg">
<p>背景图的宽高和画布的宽高是一样的，那么为什么有虚拟按键的时候背景图就不全屏呢？原因其实很简单（然而找了半天才找到原因😅 ），来看一下 Lottie 是怎么解析 json 数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> LottieComposition <span class="title">fromJsonSync</span><span class="params">(Resources res, JSONObject json)</span> </span>&#123;</div><div class="line">      Rect bounds = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">float</span> scale = res.getDisplayMetrics().density;</div><div class="line">      <span class="keyword">int</span> width = json.optInt(<span class="string">"w"</span>, -<span class="number">1</span>);</div><div class="line">      <span class="keyword">int</span> height = json.optInt(<span class="string">"h"</span>, -<span class="number">1</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (width != -<span class="number">1</span> &amp;&amp; height != -<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> scaledWidth = (<span class="keyword">int</span>) (width * scale);</div><div class="line">        <span class="keyword">int</span> scaledHeight = (<span class="keyword">int</span>) (height * scale);</div><div class="line">        bounds = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, scaledWidth, scaledHeight);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">long</span> startFrame = json.optLong(<span class="string">"ip"</span>, <span class="number">0</span>);</div><div class="line">      <span class="keyword">long</span> endFrame = json.optLong(<span class="string">"op"</span>, <span class="number">0</span>);</div><div class="line">      <span class="keyword">int</span> frameRate = json.optInt(<span class="string">"fr"</span>, <span class="number">0</span>);</div><div class="line">      LottieComposition composition =</div><div class="line">          <span class="keyword">new</span> LottieComposition(bounds, startFrame, endFrame, frameRate, scale);</div><div class="line">      JSONArray assetsJson = json.optJSONArray(<span class="string">"assets"</span>);</div><div class="line">      parseImages(assetsJson, composition);</div><div class="line">      parsePrecomps(assetsJson, composition);</div><div class="line">      parseLayers(json, composition);</div><div class="line">      <span class="keyword">return</span> composition;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析出了动画的宽高、帧率等信息，这里将解析出来的宽高乘上了屏幕的像素密度，然后设置渲染区域的边界，为了便于理解，将其称为画布。我这台手机是 1080P 的分辨率，density = 3，scaledWidth = 2250，scaledHeight = 4002，现在缩放后的画布宽高比手机屏幕大了太多，如果动画在这种尺寸下面渲染肯定不行。所以 LottieAnimationView 加载 Composition 时判断了画布的宽高如果大于手机屏幕的宽高就进行等比例缩小：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComposition</span><span class="params">(@NonNull LottieComposition composition)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (L.DBG) &#123;</div><div class="line">      Log.v(TAG, <span class="string">"Set Composition \n"</span> + composition);</div><div class="line">    &#125;</div><div class="line">    lottieDrawable.setCallback(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> isNewComposition = lottieDrawable.setComposition(composition);</div><div class="line">    <span class="keyword">if</span> (!isNewComposition) &#123;</div><div class="line">      <span class="comment">// We can avoid re-setting the drawable, and invalidating the view, since the composition</span></div><div class="line">      <span class="comment">// hasn't changed.</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//重点在这里，根据屏幕宽高对画布进行等比例缩放</span></div><div class="line">    <span class="keyword">int</span> screenWidth = Utils.getScreenWidth(getContext());</div><div class="line">    <span class="keyword">int</span> screenHeight = Utils.getScreenHeight(getContext());</div><div class="line">    <span class="keyword">int</span> compWidth = composition.getBounds().width();</div><div class="line">    <span class="keyword">int</span> compHeight = composition.getBounds().height();</div><div class="line">    <span class="comment">//如果画布的宽高大于屏幕宽高，计算缩放比</span></div><div class="line">    <span class="keyword">if</span> (compWidth &gt; screenWidth ||</div><div class="line">        compHeight &gt; screenHeight) &#123;</div><div class="line">      <span class="keyword">float</span> xScale = screenWidth / (<span class="keyword">float</span>) compWidth;</div><div class="line">      <span class="keyword">float</span> yScale = screenHeight / (<span class="keyword">float</span>) compHeight;</div><div class="line">      <span class="comment">//按比例缩小</span></div><div class="line">      setScale(Math.min(xScale, yScale));</div><div class="line">      Log.w(L.TAG, String.format(</div><div class="line">          <span class="string">"Composition larger than the screen %dx%d vs %dx%d. Scaling down."</span>,</div><div class="line">          compWidth, compHeight, screenWidth, screenHeight));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// If you set a different composition on the view, the bounds will not update unless</span></div><div class="line">    <span class="comment">// the drawable is different than the original.</span></div><div class="line">    setImageDrawable(<span class="keyword">null</span>);</div><div class="line">    setImageDrawable(lottieDrawable);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.composition = composition;</div><div class="line"></div><div class="line">    requestLayout();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>计算出宽和高的缩放比后，为了让画布小于屏幕，所以取较小的一个比例调用 setScale 方法将缩放比设置到 lottieDrawable 上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScale</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</div><div class="line">    lottieDrawable.setScale(scale);</div><div class="line">    <span class="keyword">if</span> (getDrawable() == lottieDrawable) &#123;</div><div class="line">      setImageDrawable(<span class="keyword">null</span>);</div><div class="line">      setImageDrawable(lottieDrawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>lottieDrawable 的 setScale 方法保存了缩放比，并且更新了绘制的矩形范围：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScale</span><span class="params">(<span class="keyword">float</span> scale)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.scale = scale;</div><div class="line">    updateBounds();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以看到矩形的范围是根据画布的宽高进行了等比例的缩放</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateBounds</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (composition == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    setBounds(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) (composition.getBounds().width() * scale),</div><div class="line">        (<span class="keyword">int</span>) (composition.getBounds().height() * scale));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在画布被缩放了，然而背景图呢？来看一下 lottieDrawable 的绘制代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(@NonNull Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (compositionLayer == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    matrix.reset();</div><div class="line">    matrix.preScale(scale, scale);</div><div class="line">    compositionLayer.draw(canvas, matrix, alpha);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>lottieDrawable 在绘制的时候对 matrix 设置了缩放比，然后调用了 compositionLayer 去进行具体的绘制。这个 compositionLayer 就是所有图层的一个组合，它有一个<code>List&lt;BaseLayer&gt; layers</code>属性， 这个属性就是 json 文件里面的<code>layers</code>节点解析出来的图层列表，每个图层中间还包含一些属性动画。<code>compositionLayer.draw(canvas, matrix, alpha)</code>方法中主要调用了 drawLayer 抽象方法由图层的具体实现类执行绘制：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLayer</span><span class="params">(Canvas canvas, Matrix parentMatrix, <span class="keyword">int</span> parentAlpha)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = layers.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--) &#123;</div><div class="line">      layers.get(i).draw(canvas, parentMatrix, parentAlpha);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到 CompositionLayer 类的 drawLayer 方法遍历 layers 集合进行循环绘制，这里是使用图片文件做的动画，对应的 Layer 实现类为 ImageLayer。 看下 ImageLayer 的绘制方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawLayer</span><span class="params">(@NonNull Canvas canvas, Matrix parentMatrix, <span class="keyword">int</span> parentAlpha)</span> </span>&#123;</div><div class="line">    Bitmap bitmap = getBitmap();</div><div class="line">    <span class="keyword">if</span> (bitmap == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    paint.setAlpha(parentAlpha);</div><div class="line">    canvas.save();</div><div class="line">    canvas.concat(parentMatrix);</div><div class="line">    src.set(<span class="number">0</span>, <span class="number">0</span>, bitmap.getWidth(), bitmap.getHeight());</div><div class="line">    dst.set(<span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">int</span>) (bitmap.getWidth() * density), (<span class="keyword">int</span>) (bitmap.getHeight() * density));</div><div class="line">    canvas.drawBitmap(bitmap, src, dst , paint);</div><div class="line">    canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>getBitmap() 方法会调用到一开始设置的代理类 ImageAssetDelegate ，从 SD 卡加载图片。  </p>
<p>代码中调用了 canvas 的<code>save</code>、<code>restore</code>方法来进行图层的叠加绘制，lottieDrawable 的<code>draw</code>方法传递下来的<code>matrix</code>用到了<code>concat</code>方法上，对 bitmap 进行了等比缩放。</p>
<p>整个流程跑下来，归根结底就是一句话：</p>
<p><strong>背景图的长宽比是 16 : 9，手机屏幕的长宽比也是 16 : 9，但是因为底部的虚拟按键占了一部分的高度，屏幕可用空间的长宽比大约为 3 : 2，所以导致背景图不能铺满屏幕</strong></p>
<h2 id="全屏适配"><a href="#全屏适配" class="headerlink" title="全屏适配"></a>全屏适配</h2><p>动画不能全屏有两种情况，一种是手机长宽比和画布的长宽比是相同的，只是因为状态栏、导航栏占了屏幕一部分空间导致不能全屏，那么使用方案一可以解决问题。还有一种情况是手机屏幕长宽比和画布的长宽比就是不一样，毕竟 Android 机型这么多，有几台奇葩手机很正常，那么使用方案二可以实现全屏。</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>在执行动画的界面隐藏虚拟按键，或者将虚拟按键设置为透明浮在布局上面，这样屏幕的长宽比和画布的长宽比一样就没有问题。目前市面上的手机基本上都是 720P、1080P、2K 等分辨率，这些分辨率都是 16 : 9 的尺寸。</p>
<p>设置主题：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentNavigation"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者代码设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Window window = getWindow();</div><div class="line"><span class="keyword">int</span> visibility = View.SYSTEM_UI_FLAG_LOW_PROFILE |</div><div class="line">    View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;</div><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">    window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line">    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</div><div class="line">    window.setStatusBarColor(ContextCompat.getColor(<span class="keyword">this</span>, android.R.color.transparent));</div><div class="line">    visibility |= View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN |</div><div class="line">                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE |</div><div class="line">                    View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">    window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class="line">    visibility |= View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;</div><div class="line">&#125;</div><div class="line">window.getDecorView().setSystemUiVisibility(visibility);</div></pre></td></tr></table></figure>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>如果要适配其他长宽比的屏幕，咋办呢？两行代码解决问题，只不过图片有一部分会被裁剪。设置控件的宽高为<code>match_parent</code>，设置<code>android:scaleType</code>为<code>centerCrop</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/lottieAnimationView"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="总结性发言"><a href="#总结性发言" class="headerlink" title="总结性发言"></a>总结性发言</h2><p>Lottie 发布没几个月，很多功能还不够完善，缓存机制也比较弱，像这种从 SD 卡动态加载的方式，需要自己去实现缓存逻辑。但是这点小瑕疵掩盖不了牛逼的事实，就目前这个需求来说，已经大大的降低了开发成本。只不过UI设计师们需要好好练练 AE 了😆😆</p>
]]></content>
    <summary type="html">
    <![CDATA[现在有了 Lottie，可以让设计师使用 After Effects 进行动画设计，通过 Bodymovin 插件导出 json 文件，将动画资源打包上传到服务器后，客户端通过动态下载资源文件来执行动画。这样上线新的礼物，只需要将资源文件上传，客户端不需要发版完全可以执行新礼物的动画效果。]]>
    
    </summary>
    
      <category term="Lottie 直播 动态加载 礼物 动画" scheme="http://www.liujun.info/tags/Lottie-%E7%9B%B4%E6%92%AD-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD-%E7%A4%BC%E7%89%A9-%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Android" scheme="http://www.liujun.info/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://www.liujun.info/2015/12/10/hello-world/"/>
    <id>http://www.liujun.info/2015/12/10/hello-world/</id>
    <published>2015-12-10T10:22:58.000Z</published>
    <updated>2017-04-26T03:06:53.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
